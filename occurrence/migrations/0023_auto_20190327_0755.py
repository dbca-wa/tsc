# Generated by Django 2.1.7 on 2019-03-26 23:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import occurrence.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taxonomy', '0021_auto_20190327_0755'),
        ('occurrence', '0022_auto_20190307_0911'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalObservation',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='AreaAssessment',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
                ('survey_type', models.CharField(choices=[('partial', 'Partial survey'), ('edge', 'Edge Survey'), ('full', 'Full Survey'), ('opportunistic', 'Opportunistic Encounter'), ('monitoring', 'Monitoring'), ('translocation', 'Fauna Translocation Event'), ('historical', 'Historical Report')], default='partial', help_text='How much of the occurrence has been surveyed?', max_length=100, verbose_name='Survey Type')),
                ('area_surveyed_m2', models.PositiveIntegerField(blank=True, help_text='An estimate of surveyed area in square meters.', null=True, verbose_name='Surveyed Area [m2]')),
                ('survey_duration_min', models.PositiveIntegerField(blank=True, help_text='An estimate of survey duration minutes.', null=True, verbose_name='Survey Duration [min]')),
            ],
            options={
                'verbose_name': 'Area Assessment',
                'verbose_name_plural': 'Area Assessments',
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='ConservationThreat',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='FileAttachment',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
                ('attachment', models.FileField(upload_to=occurrence.models.fileattachmentobservation_media)),
                ('title', models.CharField(blank=True, help_text='A self-explanatory title for the file attachment.', max_length=500, null=True, verbose_name='Title')),
                ('confidential', models.BooleanField(db_index=True, default=False, help_text='Whether this file is confidential or can be released to the public.', verbose_name='Is confidential')),
                ('author', models.ForeignKey(blank=True, help_text='The person who authored and endorsed this file.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='occurrence_fileattachments', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'File Attachment',
                'verbose_name_plural': 'File Attachments',
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='HabitatComposition',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='HabitatCondition',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='OccurrenceCondition',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='PhysicalSample',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='PlantCount',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='VegetationClassification',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.CreateModel(
            name='WildlifeIncident',
            fields=[
                ('observationgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.ObservationGroup')),
            ],
            options={
                'abstract': False,
            },
            bases=('occurrence.observationgroup',),
        ),
        migrations.RenameModel(
            old_name='AssociatedSpeciesObservation',
            new_name='AssociatedSpecies',
        ),
        migrations.RenameModel(
            old_name='FireHistoryObservation',
            new_name='FireHistory',
        ),
        migrations.RemoveField(
            model_name='areaassessmentobservation',
            name='observationgroup_ptr',
        ),
        migrations.RemoveField(
            model_name='fileattachmentobservation',
            name='author',
        ),
        migrations.RemoveField(
            model_name='fileattachmentobservation',
            name='observationgroup_ptr',
        ),
        migrations.AddField(
            model_name='areaencounter',
            name='geolocation_capture_method',
            field=models.CharField(choices=[('drawn-online-map-widget', 'Hand-drawn on online map widget'), ('gps-perimeter-walk', 'GPS perimeter walk'), ('gps-point', 'GPS point with text description of location extent'), ('dgps', 'Differential GPS capture of entire location extent')], default='drawn-online-map-widget', help_text='How were the coordinates of the geolocation captured? ', max_length=100, verbose_name='Geolocation capture method'),
        ),
        migrations.AlterField(
            model_name='areaencounter',
            name='description',
            field=models.TextField(blank=True, help_text='A comprehensive description of the location (nearby features and places, identifiable boundaries, extent) and the encounter where forms and attached photos lack detail.', null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='areaencounter',
            name='encountered_on',
            field=models.DateTimeField(blank=True, help_text='The datetime of the original encounter, entered in the local time zone GMT+08 (Perth/Australia).', null=True, verbose_name='Encountered on'),
        ),
        migrations.AlterField(
            model_name='areaencounter',
            name='source_id',
            field=models.CharField(default=uuid.UUID('81164a34-5022-11e9-a86f-40f02f6195e0'), help_text='The ID of the record in the original source, if available.', max_length=1000, verbose_name='Source ID'),
        ),
        migrations.DeleteModel(
            name='AreaAssessmentObservation',
        ),
        migrations.DeleteModel(
            name='FileAttachmentObservation',
        ),
    ]
