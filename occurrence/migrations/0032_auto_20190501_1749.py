# Generated by Django 2.1.7 on 2019-05-01 09:49

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('occurrence', '0031_auto_20190501_1427'),
    ]

    operations = [
        migrations.CreateModel(
            name='CountAccuracy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlantCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='plantcount',
            name='clonal_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Was evidence of clonal reproduction found?', verbose_name='Clonal Peproduction Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='comments',
            field=models.TextField(blank=True, help_text='Any further comments on the plant population.', null=True, verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='dehisced_fruit_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants with dehisced fruit found?', verbose_name='Dehisced Fruit Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='flowerbuds_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants with flower buds found?', verbose_name='Flower Buds Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='flowering_plants_percent',
            field=models.PositiveIntegerField(blank=True, help_text='The proportion of plants of surveyed population in .', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Flowering Plants [%]'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='flowers_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants with flowers found?', verbose_name='Flowers Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='immature_fruit_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants with immature fruit found?', verbose_name='Immature Fruit Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='land_manager_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Especially on private property, was the land manager or owner present?', verbose_name='Land Manager Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_alive_juvenile',
            field=models.PositiveIntegerField(blank=True, help_text='Number of alive, juvenile individuals counted.', null=True, verbose_name='Number Alive Juvenile'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_alive_mature',
            field=models.PositiveIntegerField(blank=True, help_text='Number of alive, mature individuals counted.', null=True, verbose_name='Number Alive Mature'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_alive_seedlings',
            field=models.PositiveIntegerField(blank=True, help_text='Number of alive seedlings counted.', null=True, verbose_name='Number Alive Seedlings'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_alive_simple',
            field=models.PositiveIntegerField(blank=True, help_text='Number of alive individuals counted in a simple count.', null=True, verbose_name='Number Alive (Simple)'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_dead_juvenile',
            field=models.PositiveIntegerField(blank=True, help_text='Number of dead, juvenile individuals counted.', null=True, verbose_name='Number Dead Juvenile'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_dead_mature',
            field=models.PositiveIntegerField(blank=True, help_text='Number of dead, mature individuals counted.', null=True, verbose_name='Number Dead Mature'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_dead_seedlings',
            field=models.PositiveIntegerField(blank=True, help_text='Number of dead seedlings counted.', null=True, verbose_name='Number Dead Seedlings'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_dead_simple',
            field=models.PositiveIntegerField(blank=True, help_text='Number of dead individuals counted in a simple count.', null=True, verbose_name='Number Dead (Simple)'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='no_quadrats_surveyed',
            field=models.PositiveIntegerField(blank=True, help_text='Number of quadrats which were surveyed.', null=True, verbose_name='Number of Quadrats Surveyed'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='population_area_estimated_m2',
            field=models.PositiveIntegerField(blank=True, help_text='The estimated area of the encountered plant population in square meters.', null=True, verbose_name='Estimated population area [m2]'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='quadrat_area_individual_m2',
            field=models.PositiveIntegerField(blank=True, help_text='The area one individual survey quadrat in square meters.', null=True, verbose_name='Individual Quadrat Area [m2]'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='quadrat_area_total_m2',
            field=models.PositiveIntegerField(blank=True, help_text='The area all survey quadrats combined in square meters.', null=True, verbose_name='Total Quadrat Area [m2]'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='quadrats_details_attached',
            field=models.BooleanField(db_index=True, default=False, help_text='Are details of quadrat surveys uploaded as File Attachment?', verbose_name='Quadrat Details Attached'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='quadrats_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were survey quadrats present?', verbose_name='Quadrats Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='ripe_fruit_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants with ripe fruit found?', verbose_name='Ripe Fruit Present'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='vegetative_present',
            field=models.BooleanField(db_index=True, default=False, help_text='Were plants in vegetative state found?', verbose_name='Vegetative State Present'),
        ),
        migrations.AlterField(
            model_name='areaencounter',
            name='source_id',
            field=models.CharField(default=uuid.UUID('67e9df54-6bf6-11e9-a870-40f02f6195e0'), help_text='The ID of the record in the original source, if available.', max_length=1000, verbose_name='Source ID'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='count_accuracy',
            field=models.ForeignKey(blank=True, help_text='Add missing lookup values via the data curation portal.', null=True, on_delete=django.db.models.deletion.CASCADE, to='occurrence.CountAccuracy', verbose_name='Plant Count Accuracy'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='count_method',
            field=models.ForeignKey(blank=True, help_text='Add missing lookup values via the data curation portal.', null=True, on_delete=django.db.models.deletion.CASCADE, to='occurrence.CountMethod', verbose_name='Plant Count Method'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='count_subject',
            field=models.ForeignKey(blank=True, help_text='What was counted?', null=True, on_delete=django.db.models.deletion.CASCADE, to='occurrence.CountSubject', verbose_name='Counted Subject'),
        ),
        migrations.AddField(
            model_name='plantcount',
            name='plant_condition',
            field=models.ForeignKey(blank=True, help_text='What condition were most of the plants in?', null=True, on_delete=django.db.models.deletion.CASCADE, to='occurrence.PlantCondition', verbose_name='Plant condition'),
        ),
    ]
