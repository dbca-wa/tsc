# Generated by Django 2.0.7 on 2018-07-31 05:44

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django_fsm
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('occurrence', '0001_initial'), ('occurrence', '0002_auto_20180420_1140')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        #('taxonomy', '0074_auto_20180419_1411'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encountered_on', models.DateTimeField(blank=True, help_text='The datetime of the original encounter.', null=True, verbose_name='Encountered on')),
                ('source', models.PositiveIntegerField(choices=[(0, 'Direct entry'), (1, 'Manual entry from paper datasheet'), (2, 'Digital data capture (ODK)'), (10, 'Threatened Fauna'), (11, 'Threatened Flora'), (12, 'Threatened Communities'), (20, 'Turtle Tagging Database WAMTRAM2'), (21, 'Ningaloo Turtle Program'), (22, 'Broome  Turtle Program'), (23, 'Pt Hedland Turtle Program'), (24, 'Gnaraloo Turtle Program'), (25, 'Eco Beach Turtle Program'), (30, 'Cetacean Strandings Database'), (31, 'Pinniped Strandings Database')], default=0, help_text='Where was this record captured initially?', verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the record in the original source, if available.', max_length=1000, null=True, verbose_name='Source ID')),
                ('status', django_fsm.FSMField(choices=[('new', 'New'), ('proofread', 'Proofread'), ('curated', 'Curated'), ('published', 'Published')], default='new', max_length=50, verbose_name='QA Status')),
                ('area_type', models.PositiveIntegerField(choices=[(0, 'Ephemeral Site'), (1, 'Permanent Site'), (2, 'Critical Habitat'), (10, 'TEC Boundary'), (11, 'TEC Buffer'), (12, 'TEC Site'), (20, 'Flora Population'), (21, 'Flora Subpopulation'), (30, 'Fauna Site'), (40, 'Marine Protected Area'), (41, 'Locality')], default=0, help_text='The area type.', verbose_name='Data Source')),
                ('accuracy', models.FloatField(blank=True, help_text='The measured or estimated accuracy of the location in meters.', null=True, verbose_name='Accuracy [m]')),
                ('code', models.CharField(help_text='A URL-safe, short code. Multiple records of the same Area will be recognised by the same area type and code.', max_length=1000, verbose_name='Code')),
                ('label', models.CharField(blank=True, editable=False, help_text="A short but comprehensive label, populated from the model's string representation.", max_length=1000, null=True, verbose_name='Label')),
                ('name', models.CharField(blank=True, help_text='A human-readable name.', max_length=1000, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, help_text="A Point representing the Area. If empty, the centroid will be calculated from the Area's polygon extent.", null=True, srid=4326, verbose_name='Representative Point')),
                ('northern_extent', models.FloatField(blank=True, editable=False, help_text='The northernmost latitude serves to sort areas.', null=True, verbose_name='Northernmost latitude')),
                ('as_html', models.TextField(blank=True, editable=False, help_text='The cached HTML representation for display purposes.', null=True, verbose_name='HTML representation')),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(blank=True, help_text='The exact extent of the area as polygon in WGS84, if available.', null=True, srid=4326, verbose_name='Location')),
            ],
            options={
                'ordering': ['-northern_extent', 'name'],
                'verbose_name': 'Area',
                #'manager_inheritance_from_future': True,
                'verbose_name_plural': 'Areas',
            },
        ),
        migrations.CreateModel(
            name='CommunityArea',
            fields=[
                ('area_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.Area')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_related_areas', to='taxonomy.Community')),
            ],
            options={
                #'manager_inheritance_from_future': True,
            },
            bases=('occurrence.area',),
        ),
        migrations.CreateModel(
            name='TaxonArea',
            fields=[
                ('area_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='occurrence.Area')),
                ('taxon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxon_related_areas', to='taxonomy.Taxon')),
            ],
            options={
                #'manager_inheritance_from_future': True,
            },
            bases=('occurrence.area',),
        ),
        migrations.AddField(
            model_name='area',
            name='encountered_by',
            field=models.ForeignKey(blank=True, help_text='The person who experience the original encounter.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Encountered by'),
        ),
        migrations.AddField(
            model_name='area',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_occurrence.area_set+', to='contenttypes.ContentType'),
        ),
        migrations.AlterField(
            model_name='area',
            name='area_type',
            field=models.PositiveIntegerField(choices=[(0, 'Ephemeral Site'), (1, 'Permanent Site'), (2, 'Critical Habitat'), (10, 'TEC Boundary'), (11, 'TEC Buffer'), (12, 'TEC Site'), (20, 'Flora Population'), (21, 'Flora Subpopulation'), (30, 'Fauna Site'), (40, 'Marine Protected Area'), (41, 'Locality')], default=0, help_text='The area type.', verbose_name='Area type'),
        ),
    ]
