# Generated by Django 2.1.7 on 2019-03-27 02:00

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taxonomy', '0022_auto_20190327_1000'),
        ('conservation', '0014_auto_20190307_1121'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConservationThreat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encountered_on', models.DateTimeField(blank=True, help_text='The datetime of the original encounter, entered in the local time zone GMT+08 (Perth/Australia).', null=True, verbose_name='Encountered on')),
                ('target_area', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='If this action pertains to only some but not all occurrences, indicate the target area(s) here. This management action will be automatically affiliated with all intersecting occurrence areas.', null=True, srid=4326, verbose_name='Target Area')),
                ('occurrence_area_code', models.CharField(blank=True, help_text='The known code for the occurrence area this conservation threat pertains to, e.g. a Fauna site, a Flora (sub)population ID, or a TEC/PEC boundary name.', max_length=1000, null=True, verbose_name='Occurence area code')),
                ('cause', models.TextField(blank=True, help_text='Describe the threat cause or agent.', null=True, verbose_name='Threat cause')),
            ],
            options={
                'verbose_name': 'Conservation Threat',
                'verbose_name_plural': 'Conservation Threats',
                'ordering': ['category', 'cause'],
            },
        ),
        migrations.CreateModel(
            name='ConservationThreatCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Conservation Threat Category',
                'verbose_name_plural': 'Conservation Threat Categories',
            },
        ),
        migrations.AlterModelOptions(
            name='conservationactioncategory',
            options={'verbose_name': 'Conservation Action Category', 'verbose_name_plural': 'Conservation Action Categories'},
        ),
        migrations.AlterField(
            model_name='conservationaction',
            name='communities',
            field=models.ManyToManyField(blank=True, help_text='All communities this conservation action pertains to.', to='taxonomy.Community', verbose_name='Communities'),
        ),
        migrations.AlterField(
            model_name='conservationaction',
            name='document',
            field=models.ForeignKey(blank=True, help_text='The document in which this conservation action is specified.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='conservation.Document', verbose_name='Plan document'),
        ),
        migrations.AlterField(
            model_name='conservationaction',
            name='occurrence_area_code',
            field=models.CharField(blank=True, help_text='The known code for the occurrence area this conservation action pertains to, either a Fauna site, a Flora (sub)population ID, or a TEC/PEC boundary name.', max_length=1000, null=True, verbose_name='Occurence area code'),
        ),
        migrations.AlterField(
            model_name='conservationaction',
            name='target_area',
            field=django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='If this action pertains to only some but not all occurrences, indicate the target area(s) here. This conservation action will be automatically affiliated with all intersecting occurrence areas.', null=True, srid=4326, verbose_name='Target Area'),
        ),
        migrations.AlterField(
            model_name='conservationaction',
            name='taxa',
            field=models.ManyToManyField(blank=True, help_text='All taxa this conservation action pertains to.', to='taxonomy.Taxon', verbose_name='Taxa'),
        ),
        migrations.AlterField(
            model_name='fileattachment',
            name='author',
            field=models.ForeignKey(blank=True, help_text='The person who authored and endorsed this file.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='conservation_fileattachments', to=settings.AUTH_USER_MODEL, verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='conservationthreat',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Choose the overarching category.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='conservation.ConservationThreatCategory', verbose_name='Threat category'),
        ),
        migrations.AddField(
            model_name='conservationthreat',
            name='communities',
            field=models.ManyToManyField(blank=True, help_text='All communities this conservation threat pertains to.', to='taxonomy.Community', verbose_name='Communities'),
        ),
        migrations.AddField(
            model_name='conservationthreat',
            name='document',
            field=models.ForeignKey(blank=True, help_text='The document in which this conservation threat is specified.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='conservation.Document', verbose_name='Plan document'),
        ),
        migrations.AddField(
            model_name='conservationthreat',
            name='encountered_by',
            field=models.ForeignKey(blank=True, help_text='The person who experienced the original encounter.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Encountered by'),
        ),
        migrations.AddField(
            model_name='conservationthreat',
            name='taxa',
            field=models.ManyToManyField(blank=True, help_text='All taxa this conservation threat pertains to.', to='taxonomy.Taxon', verbose_name='Taxa'),
        ),
        migrations.AlterIndexTogether(
            name='conservationthreat',
            index_together={('document', 'occurrence_area_code')},
        ),
    ]
