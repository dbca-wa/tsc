# Generated by Django 2.2.3 on 2019-07-09 05:42

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('conservation', '0027_auto_20190621_2208'),
    ]

    operations = [
        migrations.AlterField(
            model_name='communityconservationlisting',
            name='effective_from',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date printed on the Departmental ConservationListing notice containing this Conservation Listing.', null=True, verbose_name='Effective from'),
        ),
        migrations.AlterField(
            model_name='communityconservationlisting',
            name='proposed_on',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time this Conservation Listing was proposed on.', null=True, verbose_name='Proposed on'),
        ),
        migrations.AlterField(
            model_name='communityconservationlisting',
            name='source_id',
            field=models.CharField(default=uuid.UUID('5e364a33-a20c-11e9-9097-e4b97ae3f025'), help_text='The ID of the record in the original source, if available.', max_length=1000, verbose_name='Source ID'),
        ),
        migrations.AlterField(
            model_name='document',
            name='effective_from',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time from which this document is effective from.', null=True, verbose_name='Effective from'),
        ),
        migrations.AlterField(
            model_name='document',
            name='effective_from_commonwealth',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time from which this document was adopted by the Commonwealth.', null=True, verbose_name='Adopted by Commonwealth on'),
        ),
        migrations.AlterField(
            model_name='document',
            name='effective_to',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time to which this document is effective to.', null=True, verbose_name='Effective to'),
        ),
        migrations.AlterField(
            model_name='document',
            name='effective_to_commonwealth',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time on which this document was retired by the Commonwealth.', null=True, verbose_name='Retired by Commonwealth on'),
        ),
        migrations.AlterField(
            model_name='document',
            name='last_reviewed_on',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time this Conservation Listing was last reviewed.', null=True, verbose_name='Last reviewed on'),
        ),
        migrations.AlterField(
            model_name='document',
            name='review_due',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time this Document should be reviewed.', null=True, verbose_name='Review due date'),
        ),
        migrations.AlterField(
            model_name='taxonconservationlisting',
            name='effective_from',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date printed on the Departmental ConservationListing notice containing this Conservation Listing.', null=True, verbose_name='Effective from'),
        ),
        migrations.AlterField(
            model_name='taxonconservationlisting',
            name='proposed_on',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The date and time this Conservation Listing was proposed on.', null=True, verbose_name='Proposed on'),
        ),
        migrations.AlterField(
            model_name='taxonconservationlisting',
            name='source_id',
            field=models.CharField(default=uuid.UUID('5e364a33-a20c-11e9-9097-e4b97ae3f025'), help_text='The ID of the record in the original source, if available.', max_length=1000, verbose_name='Source ID'),
        ),
        migrations.AlterIndexTogether(
            name='conservationcriterion',
            index_together={('conservation_list', 'rank')},
        ),
        migrations.AlterIndexTogether(
            name='conservationthreat',
            index_together={('category', 'cause'), ('document', 'occurrence_area_code')},
        ),
        migrations.AlterIndexTogether(
            name='document',
            index_together={('document_type', 'title')},
        ),
    ]
