# -*- coding: utf-8 -*-
# Generated by Django 2.0.7 on 2018-07-31 05:39
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import mptt.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('taxonomy', '0001_initial'), ('taxonomy', '0002_auto_20180219_1220'), ('taxonomy', '0003_auto_20180219_1240'), ('taxonomy', '0004_auto_20180219_1445'), ('taxonomy', '0005_auto_20180219_1446'), ('taxonomy', '0006_auto_20180221_1013'), ('taxonomy', '0007_auto_20180221_1650'), ('taxonomy', '0008_auto_20180222_1026'), ('taxonomy', '0009_auto_20180222_1137'), ('taxonomy', '0010_auto_20180222_1322'), ('taxonomy', '0011_auto_20180222_1331'), ('taxonomy', '0012_auto_20180222_1419'), ('taxonomy', '0013_auto_20180222_1421'), ('taxonomy', '0014_auto_20180222_1429'), ('taxonomy', '0015_auto_20180222_1450'), ('taxonomy', '0016_auto_20180223_0839'), ('taxonomy', '0017_auto_20180223_1413'), ('taxonomy', '0018_auto_20180223_1416'), ('taxonomy', '0019_auto_20180223_1417'), ('taxonomy', '0020_auto_20180308_1054'), ('taxonomy', '0020_auto_20180308_0947'), ('taxonomy', '0021_merge_20180308_1153'), ('taxonomy', '0022_auto_20180308_1757'), ('taxonomy', '0023_auto_20180313_1317'), ('taxonomy', '0024_auto_20180313_1403'), ('taxonomy', '0025_auto_20180313_1442'), ('taxonomy', '0026_auto_20180313_1551'), ('taxonomy', '0027_auto_20180313_1555'), ('taxonomy', '0028_auto_20180313_1658'), ('taxonomy', '0029_auto_20180320_2049'), ('taxonomy', '0030_auto_20180321_0956'), ('taxonomy', '0031_auto_20180323_1243'), ('taxonomy', '0032_auto_20180326_1353'), ('taxonomy', '0033_auto_20180326_1409'), ('taxonomy', '0034_auto_20180326_2042'), ('taxonomy', '0035_auto_20180326_2104'), ('taxonomy', '0036_auto_20180327_1538'), ('taxonomy', '0037_auto_20180329_1608'), ('taxonomy', '0038_auto_20180329_1612'), ('taxonomy',
auto_20180329_1621'), ('taxonomy', '0040_auto_20180404_1113'), ('taxonomy', '0041_auto_20180404_1327'), ('taxonomy', '0042_auto_20180404_1512'), ('taxonomy', '0043_auto_20180404_1515'), ('taxonomy', '0044_auto_20180404_1532'), ('taxonomy', '0045_auto_20180405_0928'), ('taxonomy', '0046_auto_20180405_0932'), ('taxonomy', '0047_auto_20180405_0934'), ('taxonomy', '0048_auto_20180405_1008'), ('taxonomy', '0049_auto_20180405_1009'), ('taxonomy', '0050_auto_20180405_1039'), ('taxonomy', '0051_auto_20180410_1456'), ('taxonomy', '0052_auto_20180410_1459'), ('taxonomy', '0053_auto_20180410_1504'), ('taxonomy', '0054_auto_20180410_1505'), ('taxonomy', '0055_auto_20180410_1511'), ('taxonomy', '0056_auto_20180411_1008'), ('taxonomy', '0057_auto_20180411_1314'), ('taxonomy', '0058_auto_20180411_1314'), ('taxonomy', '0059_auto_20180411_1324'), ('taxonomy', '0060_auto_20180411_1416'), ('taxonomy', '0061_auto_20180411_2121'), ('taxonomy', '0062_auto_20180411_2131'), ('taxonomy', '0063_auto_20180411_2204'), ('taxonomy', '0064_auto_20180413_2031'), ('taxonomy', '0065_auto_20180413_2122'), ('taxonomy', '0066_auto_20180413_2123'), ('taxonomy', '0067_auto_20180417_1650'), ('taxonomy', '0068_auto_20180419_1248'), ('taxonomy', '0069_auto_20180419_1253'), ('taxonomy', '0070_auto_20180419_1355'), ('taxonomy', '0071_auto_20180419_1357'), ('taxonomy', '0072_auto_20180419_1400'), ('taxonomy', '0073_auto_20180419_1411'), ('taxonomy', '0074_auto_20180419_1411'), ('taxonomy', '0075_auto_20180420_1140'), ('taxonomy', '0076_auto_20180501_1025'), ('taxonomy', '0077_auto_20180509_1028'), 
taxonomy', '0078_auto_20180717_1601')


    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HbvFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('name_id', models.BigIntegerField(
                    help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('rank_id', models.BigIntegerField(blank=True,
                                                   help_text='WACensus Taxonomic Rank ID.', null=True, verbose_name='Rank ID')),
                ('rank_name', models.CharField(blank=True, help_text='WACensus Taxonomic Rank Name.',
                                               max_length=500, null=True, verbose_name='Rank Name')),
                ('family_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Family Name')),
                ('is_current', models.CharField(blank=True, help_text='WACensus currency status.',
                                                max_length=100, null=True, verbose_name='Is name current?')),
                ('informal', models.CharField(blank=True, help_text='The approval status indicates whether a taxonomic name is a phrase name (PN), manuscript name (MS) or published (blank).',
                                              max_length=500, null=True, verbose_name='Name approval status')),
                ('comments', models.TextField(blank=True, help_text='Comments about the name.', null=True, verbose_name='Comments')),
                ('family_code', models.CharField(blank=True, help_text='Taxonomic Family Code, deprecated, no not use.',
                                                 max_length=1000, null=True, verbose_name='Family Code')),
                ('linear_sequence', models.BigIntegerField(
                    blank=True, help_text='Always populated for plant families, may be blank for other names.', null=True, verbose_name='Linear sequence')),
                ('order_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Order Name')),
                ('class_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Class')),
                ('division_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Division')),
                ('kingdom_name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Kingdom')),
                ('author', models.CharField(blank=True, help_text='Taxonomic Author',
                                            max_length=1000, null=True, verbose_name='Author')),
                ('editor', models.CharField(blank=True, help_text='The rditor of the journal the name was published in.',
                                            max_length=1000, null=True, verbose_name='Editor')),
                ('reference', models.CharField(blank=True, help_text='The citation for the reference article this name was published in.',
                                               max_length=1000, null=True, verbose_name='Reference')),
                ('supra_code', models.CharField(blank=True, max_length=1000,
                                                null=True, verbose_name='HBV Suprafamily Group Code')),
                ('added_on', models.CharField(blank=True, help_text='Date on which this record was added to WACensus.',
                                              max_length=100, null=True, verbose_name='WACensus added on')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
                ('class_nid', models.BigIntegerField(blank=True,
                                                     help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='Class NameID')),
                ('division_nid', models.BigIntegerField(blank=True,
                                                        help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='Division NameID')),
                ('kingdom_id', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Kingdom ID.', null=True, verbose_name='Kingdom ID')),
                ('order_nid', models.BigIntegerField(blank=True,
                                                     help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='Order NameID')),
            ],
            options={
                'ordering': ['kingdom_name', 'division_name', 'class_name', 'order_name', 'family_name'],
                'verbose_name': 'HBV Family',
                'verbose_name_plural': 'HBV Families',
            },
        ),
        migrations.CreateModel(
            name='HbvGenus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('name_id', models.BigIntegerField(
                    help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('kingdom_id', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Kingdom ID.', null=True, verbose_name='Kingdom ID')),
                ('rank_id', models.BigIntegerField(blank=True,
                                                   help_text='WACensus Taxonomic Rank ID.', null=True, verbose_name='Rank ID')),
                ('rank_name', models.CharField(blank=True, help_text='WACensus Taxonomic Rank Name.',
                                               max_length=500, null=True, verbose_name='Rank Name')),
                ('genus', models.CharField(blank=True, help_text='The Genus name.',
                                           max_length=1000, null=True, verbose_name='Genus')),
                ('is_current', models.CharField(blank=True, help_text='WACensus currency status.',
                                                max_length=100, null=True, verbose_name='Is name current?')),
                ('informal', models.CharField(blank=True, help_text='The approval status indicates whether a taxonomic name is a phrase name (PN), manuscript name (MS) or published (blank).',
                                              max_length=500, null=True, verbose_name='Name approval status')),
                ('comments', models.TextField(blank=True, help_text='Comments about the name.', null=True, verbose_name='Comments')),
                ('family_code', models.CharField(blank=True, help_text='Taxonomic Family Code, deprecated, no not use.',
                                                 max_length=1000, null=True, verbose_name='Family Code')),
                ('family_nid', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Family NameID', null=True, verbose_name='Family NameID')),
                ('author', models.CharField(blank=True, help_text='Taxonomic Author',
                                            max_length=1000, null=True, verbose_name='Author')),
                ('editor', models.CharField(blank=True, help_text='The rditor of the journal the name was published in.',
                                            max_length=1000, null=True, verbose_name='Editor')),
                ('reference', models.CharField(blank=True, help_text='The citation for the reference article this name was published in.',
                                               max_length=1000, null=True, verbose_name='Reference')),
                ('genusid', models.BigIntegerField(blank=True, help_text='WACensus Genus ID', null=True, verbose_name='Genus ID')),
                ('added_on', models.CharField(blank=True, help_text='Date on which this record was added to WACensus.',
                                              max_length=100, null=True, verbose_name='WACensus added on')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['kingdom_id', 'family_nid', 'genusid'],
                'verbose_name': 'HBV Genus',
                'verbose_name_plural': 'HBV Genera',
            },
        ),
        migrations.CreateModel(
            name='HbvGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('class_id', models.CharField(blank=True, max_length=1000,
                                              null=True, verbose_name='HBV Suprafamily Group Code')),
                ('name_id', models.BigIntegerField(
                    help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('updated_by', models.CharField(blank=True, help_text='The person or system who updated this record last in WACensus.',
                                                max_length=100, null=True, verbose_name='Updated by')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('rank_name', models.CharField(blank=True, help_text='WACensus Taxonomic Rank Name.',
                                               max_length=500, null=True, verbose_name='Rank Name')),
                ('name', models.CharField(blank=True, help_text='.', max_length=1000, null=True, verbose_name='Name')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['class_id', 'rank_name', 'name'],
                'verbose_name': 'HBV Suprafamily Group Membership',
                'verbose_name_plural': 'HBV Suprafamily Group Memberships',
            },
        ),
        migrations.CreateModel(
            name='HbvName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_id', models.BigIntegerField(
                    help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('name', models.CharField(blank=True, help_text='Built by WACensus by concatenating all name fields, excluding author and editor. Phrase names may contain authors.',
                                          max_length=1000, null=True, verbose_name='Name')),
                ('full_name', models.CharField(blank=True, help_text='Built by WACensus by concatenating all name fields, including author and editor.',
                                               max_length=1000, null=True, verbose_name='Full Name')),
                ('vernacular', models.CharField(blank=True, help_text='Preferred Vernacular Name.',
                                                max_length=1000, null=True, verbose_name='Preferred Vernacular Name')),
                ('all_vernaculars', models.TextField(
                    blank=True, help_text='All Vernacular Names in order of preference including preferred vernacular name.', null=True, verbose_name='All Vernacular Names')),
                ('kingdom_id', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Kingdom ID.', null=True, verbose_name='Kingdom ID')),
                ('family_code', models.CharField(blank=True, help_text='Taxonomic Family Code, deprecated, no not use.',
                                                 max_length=1000, null=True, verbose_name='Family Code')),
                ('family_nid', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Family NameID', null=True, verbose_name='Family NameID')),
                ('rank_id', models.BigIntegerField(blank=True,
                                                   help_text='WACensus Taxonomic Rank ID.', null=True, verbose_name='Rank ID')),
                ('rank_name', models.CharField(blank=True, help_text='WACensus Taxonomic Rank Name.',
                                               max_length=500, null=True, verbose_name='Rank Name')),
                ('name1', models.CharField(blank=True, help_text='Taxon name if taxon is of rank kingdom to subgenus. Genus if taxon is of rank species or below.',
                                           max_length=500, null=True, verbose_name='Name 1')),
                ('name2', models.CharField(blank=True, help_text='Empty if taxon is of rank kingdom to subgenus. Specific epithet if taxon is of rank species or below.',
                                           max_length=500, null=True, verbose_name='Name 2')),
                ('rank3', models.CharField(blank=True, help_text='Whichever rank comes after the species epithet: subsp, var, forma, subforma.',
                                           max_length=500, null=True, verbose_name='Rank 3')),
                ('name3', models.CharField(blank=True, help_text='Whichever name comes after rank 3.',
                                           max_length=500, null=True, verbose_name='Name 3')),
                ('rank4', models.CharField(blank=True, help_text='Whichever rank comes after name 3: var, forma, subforma.',
                                           max_length=500, null=True, verbose_name='Rank 4')),
                ('name4', models.CharField(blank=True, help_text='Whichever name comes after rank 4.',
                                           max_length=500, null=True, verbose_name='Name 4')),
                ('author', models.CharField(blank=True, help_text='Taxonomic Author',
                                            max_length=1000, null=True, verbose_name='Author')),
                ('editor', models.CharField(blank=True, help_text='The rditor of the journal the name was published in.',
                                            max_length=1000, null=True, verbose_name='Editor')),
                ('reference', models.CharField(blank=True, help_text='The citation for the reference article this name was published in.',
                                               max_length=1000, null=True, verbose_name='Reference')),
                ('pub_id', models.BigIntegerField(blank=True,
                                                  help_text='WACensus Publication ID', null=True, verbose_name='Publication ID')),
                ('vol_info', models.CharField(blank=True, help_text='Journal Volume Number.',
                                              max_length=500, null=True, verbose_name='Journal Volume Number')),
                ('pub_year', models.IntegerField(blank=True, help_text='Publication Year.',
                                                 null=True, verbose_name='Publication Year')),
                ('form_desc_yr', models.CharField(blank=True, help_text='Year of first description.',
                                                  max_length=100, null=True, verbose_name='Described on (year)')),
                ('form_desc_mn', models.CharField(blank=True, help_text='Month of first description.',
                                                  max_length=100, null=True, verbose_name='Described on (month)')),
                ('form_desc_dy', models.CharField(blank=True, help_text='Day of first description.',
                                                  max_length=100, null=True, verbose_name='Described on (day)')),
                ('is_current', models.CharField(blank=True, help_text='WACensus currency status.',
                                                max_length=100, null=True, verbose_name='Is name current?')),
                ('origin', models.CharField(blank=True, help_text='Deprecated. * = introduced into WA.',
                                            max_length=1000, null=True, verbose_name='Origin')),
                ('naturalised_status', models.CharField(blank=True, help_text='Naturalisation status.',
                                                        max_length=100, null=True, verbose_name='Naturalisation status')),
                ('naturalised_certainty', models.CharField(blank=True, help_text='Naturalisation certainty.',
                                                           max_length=100, null=True, verbose_name='Naturalisation certainty')),
                ('naturalised_comments', models.TextField(blank=True,
                                                          help_text='Naturalisation comments.', null=True, verbose_name='Naturalisation comments')),
                ('is_eradicated', models.CharField(blank=True, help_text='Whether taxon is eradicated or not.',
                                                   max_length=100, null=True, verbose_name='Is eradicated?')),
                ('informal', models.CharField(blank=True, help_text='The approval status indicates whether a taxonomic name is a phrase name (PN), manuscript name (MS) or published (blank).',
                                              max_length=500, null=True, verbose_name='Name approval status')),
                ('comments', models.TextField(blank=True, help_text='Comments about the name.', null=True, verbose_name='Comments')),
                ('added_by', models.CharField(blank=True, help_text='The person or system who added this record to WACensus.',
                                              max_length=100, null=True, verbose_name='Added by')),
                ('added_on', models.CharField(blank=True, help_text='Date on which this record was added to WACensus.',
                                              max_length=100, null=True, verbose_name='WACensus added on')),
                ('updated_by', models.CharField(blank=True, help_text='The person or system who updated this record last in WACensus.',
                                                max_length=100, null=True, verbose_name='Updated by')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('linear_sequence', models.BigIntegerField(
                    blank=True, help_text='Always populated for plant families, may be blank for other names.', null=True, verbose_name='Linear sequence')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('code', models.CharField(blank=True, help_text='If available, the DBCA six-letter code used in MAX.',
                                          max_length=1000, null=True, unique=True, verbose_name='Taxon code')),
            ],
            options={
                'ordering': ['kingdom_id', 'family_nid', 'name_id'],
                'verbose_name': 'HBV Name',
                'verbose_name_plural': 'HBV Names',
            },
        ),
        migrations.CreateModel(
            name='HbvSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('name_id', models.BigIntegerField(
                    help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('kingdom_id', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Kingdom ID.', null=True, verbose_name='Kingdom ID')),
                ('rank_id', models.BigIntegerField(blank=True,
                                                   help_text='WACensus Taxonomic Rank ID.', null=True, verbose_name='Rank ID')),
                ('rank_name', models.CharField(blank=True, help_text='WACensus Taxonomic Rank Name.',
                                               max_length=500, null=True, verbose_name='Rank Name')),
                ('family_code', models.CharField(blank=True, help_text='Taxonomic Family Code, deprecated, no not use.',
                                                 max_length=1000, null=True, verbose_name='Family Code')),
                ('family_nid', models.BigIntegerField(blank=True,
                                                      help_text='WACensus Family NameID', null=True, verbose_name='Family NameID')),
                ('genus', models.CharField(blank=True, help_text='Taxon name if taxon is of rank kingdom to subgenus. Genus if taxon is of rank species or below.',
                                           max_length=500, null=True, verbose_name='Genus')),
                ('species', models.CharField(blank=True, help_text='Empty if taxon is of rank kingdom to subgenus. Specific epithet if taxon is of rank species or below.',
                                             max_length=500, null=True, verbose_name='Species')),
                ('infra_rank', models.CharField(blank=True, help_text='Whichever rank comes after the species epithet: subsp, var, forma, subforma.',
                                                max_length=500, null=True, verbose_name='Rank after species')),
                ('infra_name', models.CharField(blank=True, help_text='Whichever name comes after infra_rank.',
                                                max_length=500, null=True, verbose_name='Name after species name')),
                ('infra_rank2', models.CharField(blank=True, help_text='Whichever rank comes after infra_name: var, forma, subforma.',
                                                 max_length=500, null=True, verbose_name='Lowest rank')),
                ('infra_name2', models.CharField(blank=True, help_text='Whichever name comes after infra_rank2.',
                                                 max_length=500, null=True, verbose_name='Lowest name')),
                ('author', models.CharField(blank=True, help_text='Taxonomic Author',
                                            max_length=1000, null=True, verbose_name='Author')),
                ('editor', models.CharField(blank=True, help_text='The rditor of the journal the name was published in.',
                                            max_length=1000, null=True, verbose_name='Editor')),
                ('reference', models.CharField(blank=True, help_text='The citation for the reference article this name was published in.',
                                               max_length=1000, null=True, verbose_name='Reference')),
                ('comments', models.TextField(blank=True, help_text='Comments about the name.', null=True, verbose_name='Comments')),
                ('vernacular', models.CharField(blank=True, help_text='Preferred Vernacular Name.',
                                                max_length=1000, null=True, verbose_name='Preferred Vernacular Name')),
                ('all_vernaculars', models.TextField(
                    blank=True, help_text='All Vernacular Names in order of preference including preferred vernacular name.', null=True, verbose_name='All Vernacular Names')),
                ('species_name', models.CharField(blank=True, help_text='Built by WACensus by concatenating all name fields, excluding author and editor. Phrase names may contain authors.',
                                                  max_length=1000, null=True, verbose_name='Name')),
                ('species_code', models.CharField(blank=True, help_text='WACensus species shortcode, used for data entry.',
                                                  max_length=100, null=True, verbose_name='Species Code')),
                ('is_current', models.CharField(blank=True, help_text='WACensus currency status.',
                                                max_length=100, null=True, verbose_name='Is name current?')),
                ('naturalised', models.CharField(blank=True, max_length=100, null=True, verbose_name='Naturalised')),
                ('naturalised_status', models.CharField(blank=True, help_text='Naturalisation status.',
                                                        max_length=100, null=True, verbose_name='Naturalisation status')),
                ('naturalised_certainty', models.CharField(blank=True, help_text='Naturalisation certainty.',
                                                           max_length=100, null=True, verbose_name='Naturalisation certainty')),
                ('naturalised_comments', models.TextField(blank=True,
                                                          help_text='Naturalisation comments.', null=True, verbose_name='Naturalisation comments')),
                ('is_eradicated', models.CharField(blank=True, help_text='Whether taxon is eradicated or not.',
                                                   max_length=100, null=True, verbose_name='Is eradicated?')),
                ('informal', models.CharField(blank=True, help_text='The approval status indicates whether a taxonomic name is a phrase name (PN), manuscript name (MS) or published (blank).',
                                              max_length=500, null=True, verbose_name='Name approval status')),
                ('added_on', models.CharField(blank=True, help_text='Date on which this record was added to WACensus.',
                                              max_length=100, null=True, verbose_name='WACensus added on')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('consv_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Conservation Code')),
                ('ranking', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ranking')),
                ('linear_sequence', models.BigIntegerField(
                    blank=True, help_text='Always populated for plant families, may be blank for other names.', null=True, verbose_name='Linear sequence')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['kingdom_id', 'genus', 'species'],
                'verbose_name': 'HBV Species',
                'verbose_name_plural': 'HBV Species',
            },
        ),
        migrations.CreateModel(
            name='HbvSupra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('supra_code', models.CharField(blank=True, help_text='A short code.',
                                                max_length=1000, null=True, unique=True, verbose_name='HBV Suprafamily Group Code')),
                ('supra_name', models.CharField(blank=True, help_text='The group name.',
                                                max_length=1000, null=True, verbose_name='HBV Suprafamily Group Name')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['supra_code'],
                'verbose_name': 'HBV Suprafamily Group',
                'verbose_name_plural': 'HBV Suprafamily Groups',
            },
        ),
        migrations.CreateModel(
            name='HbvVernacular',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(default=0, help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   unique=True, verbose_name='GeoServer OGC FeatureID')),
                ('name_id', models.BigIntegerField(help_text='WACensus NameID, assigned by WACensus.', verbose_name='NameID')),
                ('name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Name')),
                ('vernacular', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Vernacular Name')),
                ('language', models.CharField(blank=True, help_text='The language of the vernacular name.',
                                              max_length=1000, null=True, verbose_name='Language')),
                ('lang_pref', models.CharField(blank=True, help_text='Whether the vernacular name is the preferred name within the given language.',
                                               max_length=1000, null=True, verbose_name='Preferred within given language')),
                ('preferred', models.CharField(blank=True, help_text='Whether this vernacular name is the preferred one out of all vernacular names for the given NameID.',
                                               max_length=100, null=True, verbose_name='Preferred vernacular name')),
                ('source', models.CharField(blank=True, help_text='The source of the vernacular name.',
                                            max_length=1000, null=True, verbose_name='source')),
                ('updated_by', models.CharField(blank=True, help_text='The person or system who updated this record last in WACensus.',
                                                max_length=100, null=True, verbose_name='Updated by')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'verbose_name': 'HBV Vernacular Name',
                'verbose_name_plural': 'HBV Vernacular Names',
            },
        ),
        migrations.CreateModel(
            name='HbvXref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, help_text='The OCG Feature ID of the record, used to identify the record in GeoServer.',
                                                   null=True, verbose_name='GeoServer OGC FeatureID')),
                ('xref_id', models.BigIntegerField(blank=True, help_text='The WACensus xref ID of the record, used to identify the record in WACensus.',
                                                   null=True, unique=True, verbose_name='WACensus xref ID')),
                ('old_name_id', models.BigIntegerField(blank=True,
                                                       help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='Old NameID')),
                ('new_name_id', models.BigIntegerField(blank=True,
                                                       help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='New NameID')),
                ('xref_type', models.CharField(blank=True, choices=[('MIS', 'Misapplied name'), ('TSY', 'Taxonomic synonym'), ('NSY', 'Nomenclatural synonym'), ('EXC', 'Excluded name'), ('CON', 'Concept change'), (
                    'FOR', 'Formal description'), ('OGV', 'Orthographic variant'), ('ERR', 'Name in error'), ('ISY', 'Informal Synonym')], help_text='The taxonomic type of this crossreference.', max_length=100, null=True, verbose_name='Type')),
                ('active', models.CharField(blank=True, help_text='Inactive crossrefrences are considered deleted.',
                                            max_length=100, null=True, verbose_name='Active')),
                ('authorised_by', models.CharField(blank=True, help_text='The person or system who authorised this record last in WACensus.',
                                                   max_length=100, null=True, verbose_name='WACensus authorised by')),
                ('authorised_on', models.CharField(blank=True, help_text='Date on which this record was authorised in WACensus.',
                                                   max_length=100, null=True, verbose_name='WACensus authorised on')),
                ('comments', models.TextField(blank=True,
                                              help_text='Comments are words to clarify things.', null=True, verbose_name='Comments')),
                ('added_on', models.CharField(blank=True, help_text='Date on which this record was added to WACensus.',
                                              max_length=100, null=True, verbose_name='WACensus added on')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['authorised_on'],
                'verbose_name': 'HBV Crossreference',
                'verbose_name_plural': 'HBV Crossreferences',
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_id', models.BigIntegerField(db_index=True,
                                                   help_text='WACensus NameID, assigned by WACensus.', unique=True, verbose_name='NameID')),
                ('name', models.CharField(blank=True, db_index=True, help_text='The taxon name.',
                                          max_length=1000, null=True, verbose_name='Taxon Name')),
                ('rank', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Thing'), (7, 'Community'), (5, 'Domain'), (10, 'Kingdom'), (20, 'Subkingdom'), (30, 'Division'), (40, 'Subdivision'), (50, 'Class'), (60, 'Subclass'), (70, 'Order'), (80, 'Suborder'), (90, 'Family'), (100, 'Subfamily'), (110, 'Tribe'), (120, 'Subtribe'), (
                    130, 'Genus'), (140, 'Subgenus'), (150, 'Section'), (160, 'Subsection'), (170, 'Series'), (180, 'Subseries'), (190, 'Species'), (200, 'Subspecies'), (210, 'Variety'), (220, 'Subvariety'), (230, 'Forma'), (240, 'Subforma')], db_index=True, help_text='The taxonomic rank of the taxon.', null=True, verbose_name='Taxonomic Rank')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='The lowest known parent taxon.', null=True,
                                                      on_delete=django.db.models.deletion.CASCADE, related_name='children', to='taxonomy.Taxon', verbose_name='Parent Taxon')),
                ('current', models.BooleanField(db_index=True, default=False,
                                                help_text='Whether the name is current.', verbose_name='Is current')),
                ('publication_status', models.PositiveSmallIntegerField(choices=[(0, 'Phrase Name'), (1, 'Manuscript Name'), (
                    2, 'Published Name')], db_index=True, default=2, help_text='On what level the name is published.', verbose_name='Publication Status')),
                ('author', models.CharField(blank=True, help_text='Taxonomic Author',
                                            max_length=1000, null=True, verbose_name='Author')),
                ('canonical_name', models.CharField(blank=True, db_index=True,
                                                    help_text='The canonical name.', max_length=2000, null=True, verbose_name='Canonical Name')),
                ('taxonomic_name', models.CharField(blank=True, db_index=True,
                                                    help_text='The taxonomic name.', max_length=2000, null=True, verbose_name='Taxonomic Name')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Taxon',
                'verbose_name_plural': 'Taxa',
            },
        ),
        migrations.CreateModel(
            name='HbvParent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(blank=True, db_index=True, help_text='The OCG Feature ID of the record, used to identify the record in GeoServer.',
                                                   null=True, unique=True, verbose_name='GeoServer OGC FeatureID')),
                ('name_id', models.BigIntegerField(blank=True, db_index=True,
                                                   help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='NameID')),
                ('class_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='WACensus ClassID')),
                ('parent_nid', models.BigIntegerField(blank=True, db_index=True,
                                                      help_text='WACensus NameID, assigned by WACensus.', null=True, verbose_name='NameID')),
                ('updated_by', models.CharField(blank=True, help_text='The person or system who updated this record last in WACensus.',
                                                max_length=100, null=True, verbose_name='Updated by')),
                ('updated_on', models.CharField(blank=True, help_text='Date on which this record was updated in WACensus.',
                                                max_length=100, null=True, verbose_name='WACensus updated on')),
                ('md5_rowhash', models.CharField(blank=True, help_text='An MD5 hash of the record, used to indicate updates.',
                                                 max_length=500, null=True, verbose_name='GeoServer MD5 rowhash')),
            ],
            options={
                'ordering': ['ogc_fid'],
                'verbose_name': 'HBV Parent',
                'verbose_name_plural': 'HBV Parents',
            },
        ),
        migrations.CreateModel(
            name='Vernacular',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ogc_fid', models.BigIntegerField(help_text='The OCG Feature ID of the record, used to identify the record.',
                                                   unique=True, verbose_name='GeoServer OGC FeatureID')),
                ('name', models.CharField(blank=True, db_index=True, help_text='The vernacular name.',
                                          max_length=1000, null=True, verbose_name='Vernacular Name')),
                ('language', models.PositiveSmallIntegerField(blank=True, choices=[
                 (0, 'English'), (1, 'Indigenous')], db_index=True, help_text='The language of the vernacular name.', null=True, verbose_name='Language')),
                ('preferred', models.BooleanField(db_index=True, default=False,
                                                  help_text='Whether the vernacular name is the preferred name in the given language.', verbose_name='Is preferred')),
                ('taxon', models.ForeignKey(help_text='The taxon this vernacular name applies to.',
                                            on_delete=django.db.models.deletion.CASCADE, to='taxonomy.Taxon', verbose_name='Taxon')),
            ],
            options={
                'verbose_name': 'Vernacular Name',
                'verbose_name_plural': 'Vernacular Names',
            },
        ),
        migrations.AddField(
            model_name='taxon',
            name='vernacular_name',
            field=models.CharField(blank=True, db_index=True, help_text='The preferred english vernacular name.',
                                   max_length=2000, null=True, verbose_name='Preferred English Vernacular Name'),
        ),
        migrations.AddField(
            model_name='taxon',
            name='vernacular_names',
            field=models.TextField(blank=True, db_index=True, help_text='A list of all vernacular names.',
                                   null=True, verbose_name='All Vernacular Names'),
        ),
        migrations.CreateModel(
            name='Crossreference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xref_id', models.BigIntegerField(blank=True, help_text='The WACensus xref ID of the record.',
                                                   null=True, unique=True, verbose_name='WACensus xref ID')),
                ('reason', models.PositiveSmallIntegerField(choices=[(0, 'Misapplied name'), (1, 'Taxonomic synonym'), (2, 'Nomenclatural synonym'), (3, 'Excluded name'), (4, 'Concept change'), (
                    5, 'Formal description'), (6, 'Orthographic variant'), (7, 'Name in error'), (8, 'Informal Synonym')], db_index=True, default=7, help_text='The reason for the taxonomic change.', verbose_name='Reason')),
                ('authorised_by', models.CharField(blank=True, help_text='The person or system who authorised this record last in WACensus.',
                                                   max_length=100, null=True, verbose_name='WACensus authorised by')),
                ('authorised_on', models.DateTimeField(
                    blank=True, help_text='Date on which this record was authorised in WACensus.', null=True, verbose_name='WACensus authorised on')),
                ('effective_to', models.DateTimeField(blank=True, help_text='Xref considered deleted after this date if set.',
                                                      null=True, verbose_name='WACensus deactivated on')),
                ('comments', models.TextField(blank=True,
                                              help_text='Comments are words to clarify things.', null=True, verbose_name='Comments')),
                ('predecessor', models.ForeignKey(blank=True, help_text='The old taxon.', null=True,
                                                  on_delete=django.db.models.deletion.CASCADE, related_name='precedes', to='taxonomy.Taxon', verbose_name='Predecessor Taxon')),
                ('successor', models.ForeignKey(blank=True, help_text='The new taxon.', null=True,
                                                on_delete=django.db.models.deletion.CASCADE, related_name='supercedes', to='taxonomy.Taxon', verbose_name='Successor Taxon')),
            ],
            options={
                'verbose_name': 'Crossreference',
                'verbose_name_plural': 'Crossreferences',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, help_text='A short community codename.',
                                          max_length=1000, null=True, unique=True, verbose_name='Community code')),
                ('name', models.CharField(blank=True, help_text='A full community name.',
                                          max_length=1000, null=True, verbose_name='Community name')),
                ('description', models.TextField(blank=True, help_text='An optional description.',
                                                 null=True, verbose_name='Community description')),
                ('eoo', django.contrib.gis.db.models.fields.PolygonField(
                    blank=True, help_text='The extent of occurrence as polygon in WGS84, if available.', null=True, srid=4326, verbose_name='Extent of Occurrence')),
            ],
            options={
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='taxon',
            name='eoo',
            field=django.contrib.gis.db.models.fields.PolygonField(
                blank=True, help_text='The extent of occurrence as polygon in WGS84, if available.', null=True, srid=4326, verbose_name='Extent of Occurrence'),
        ),
        migrations.AlterField(
            model_name='taxon',
            name='rank',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(5, 'Domain'), (10, 'Kingdom'), (20, 'Subkingdom'), (30, 'Division'), (40, 'Subdivision'), (50, 'Class'), (60, 'Subclass'), (70, 'Order'), (80, 'Suborder'), (90, 'Family'), (100, 'Subfamily'), (110, 'Tribe'), (120, 'Subtribe'), (130, 'Genus'), (
                140, 'Subgenus'), (150, 'Section'), (160, 'Subsection'), (170, 'Series'), (180, 'Subseries'), (190, 'Species'), (200, 'Subspecies'), (210, 'Variety'), (220, 'Subvariety'), (230, 'Forma'), (240, 'Subforma')], db_index=True, help_text='The taxonomic rank of the taxon.', null=True, verbose_name='Taxonomic Rank'),
        ),
    ]
