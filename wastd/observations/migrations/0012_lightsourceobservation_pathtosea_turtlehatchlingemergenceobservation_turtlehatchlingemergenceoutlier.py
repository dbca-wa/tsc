# Generated by Django 2.2.3 on 2020-01-17 04:18

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0011_auto_20190709_1342'),
    ]

    operations = [
        migrations.CreateModel(
            name='LightSourceObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('light_bearing_manual', models.FloatField(blank=True, help_text='.', null=True, verbose_name='')),
                ('light_source_type', models.CharField(choices=[('na', 'NA'), ('natural', 'Natural'), ('artificial', 'Artificial')], default='na', help_text='.', max_length=300, verbose_name='')),
                ('light_source_description', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='PathToSea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(help_text='A unique, url-safe code.', max_length=500, unique=True, verbose_name='Code')),
                ('label', models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True, verbose_name='Label')),
                ('description', models.TextField(blank=True, help_text='A comprehensive description.', null=True, verbose_name='Description')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='TurtleHatchlingEmergenceOutlierObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('outlier_track_bearing_manual', models.FloatField(blank=True, help_text='Aim at track 5m from nest or high water mark.', null=True, verbose_name='Bearing')),
                ('outlier_group_size', models.PositiveIntegerField(blank=True, help_text='.', null=True, verbose_name='Number of tracks in outlier group')),
                ('outlier_track_comment', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleHatchlingEmergenceObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('bearing_to_water_manual', models.FloatField(blank=True, help_text='', null=True, verbose_name='Bearing to water')),
                ('leftmost_track_manual', models.FloatField(blank=True, help_text='Excluding outlier tracks, 5m from nest or at HWM.', null=True, verbose_name='Leftmost track bearing of main fan')),
                ('rightmost_track_manual', models.FloatField(blank=True, help_text='Excluding outlier tracks, 5m from nest or at HWM.', null=True, verbose_name='Rightmost track bearing of main fan')),
                ('no_tracks_main_group', models.PositiveIntegerField(blank=True, help_text='Exact count or best estimate.', null=True, verbose_name='Number of tracks in main fan')),
                ('no_tracks_main_group_min', models.PositiveIntegerField(blank=True, help_text='Lowest estimate.', null=True, verbose_name='Min number of tracks in main fan')),
                ('no_tracks_main_group_max', models.PositiveIntegerField(blank=True, help_text='Highest estimate.', null=True, verbose_name='Max number of tracks in main fan')),
                ('outlier_tracks_present', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Outlier tracks present')),
                ('path_to_sea_comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Hatchling path to sea comments')),
                ('hatchling_emergence_time_known', models.CharField(choices=[('na', 'NA'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='.', max_length=300, verbose_name='Hatchling emergence time known')),
                ('cloud_cover_at_emergence_known', models.CharField(choices=[('na', 'NA'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='.', max_length=300, verbose_name='Cloud cover at emergence known')),
                ('light_sources_present', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Light sources present during emergence')),
                ('hatchling_emergence_time', models.DateTimeField(blank=True, help_text='The estimated time of hatchling emergence, stored as UTC and shown in local time.', null=True, verbose_name='Hatchling emergence time')),
                ('hatchling_emergence_time_source', models.CharField(choices=[('same-night', 'Sometime that night'), ('plusminus-2h', 'Plusminus 2h of estimate'), ('plusminus-30m', 'Correct to the hour')], default='same-night', help_text='.', max_length=300, verbose_name='Hatchling emergence time estimate accuracy')),
                ('cloud_cover_at_emergence', models.PositiveIntegerField(blank=True, help_text='If known, in eights.', null=True, verbose_name='Cloud cover at emergence')),
                ('hatchling_path_to_sea', models.ManyToManyField(related_name='path_to_sea', to='observations.PathToSea')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
    ]
