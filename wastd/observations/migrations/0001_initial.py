# Generated by Django 2.0.7 on 2018-07-31 06:35

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django_fsm
from django.conf import settings
from django.db import migrations, models

import wastd.observations.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_type', models.CharField(choices=[('MPA', 'MPA'), ('Locality', 'Locality'), ('Site', 'Site')], default='Site', help_text='The area type.', max_length=300, verbose_name='Area type')),
                ('name', models.CharField(help_text='The name of the area.', max_length=1000, verbose_name='Area Name')),
                ('centroid', django.contrib.gis.db.models.fields.PointField(blank=True, editable=False, help_text='The centroid is a simplified presentation of the Area.', null=True, srid=4326, verbose_name='Centroid')),
                ('northern_extent', models.FloatField(blank=True, editable=False, help_text='The northernmost latitude serves to sort areas.', null=True, verbose_name='Northernmost latitude')),
                ('as_html', models.TextField(blank=True, editable=False, help_text='The cached HTML representation for display purposes.', null=True, verbose_name='HTML representation')),
                ('geom', django.contrib.gis.db.models.fields.PolygonField(help_text='The exact extent of the area as polygon in WGS84.', srid=4326, verbose_name='Location')),
            ],
            options={
                'verbose_name': 'Area',
                'verbose_name_plural': 'Areas',
                'ordering': ['-northern_extent', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the record in the original source, or a newly allocated ID if left blank. Delete and save to regenerate this ID.', max_length=1000, null=True, verbose_name='Source ID')),
                ('status', django_fsm.FSMField(choices=[('new', 'New'), ('proofread', 'Proofread'), ('curated', 'Curated'), ('published', 'Published')], default='new', max_length=50, verbose_name='QA Status')),
                ('where', django.contrib.gis.db.models.fields.PointField(help_text='The observation location as point in WGS84', srid=4326, verbose_name='Observed at')),
                ('when', models.DateTimeField(help_text='The observation datetime, shown as local time (no daylight savings), stored as UTC.', verbose_name='Observed on')),
                ('location_accuracy', models.CharField(choices=[('10', 'GPS reading at exact location (10 m)'), ('1000', 'Site centroid or place name (1 km)'), ('10000', 'Rough estimate (10 km)')], default='1000', help_text='The accuracy of the supplied location.', max_length=300, verbose_name='Location accuracy (m)')),
                ('name', models.CharField(blank=True, editable=False, help_text="The animal's earliest associated flipper tag ID.", max_length=1000, null=True, verbose_name='Animal Name')),
                ('as_html', models.TextField(blank=True, editable=False, help_text='The cached HTML representation for display purposes.', null=True, verbose_name='HTML representation')),
                ('as_latex', models.TextField(blank=True, editable=False, help_text='The cached Latex fragment for reporting purposes.', null=True, verbose_name='Latex fragment')),
                ('encounter_type', models.CharField(blank=True, choices=[('stranding', 'Stranding'), ('tagging', 'Tagging'), ('nest', 'Nest'), ('tracks', 'Tracks'), ('inwater', 'In water'), ('tag-management', 'Tag Management'), ('logger', 'Logger'), ('other', 'Other')], default='stranding', editable=False, help_text='The primary concern of this encounter.', max_length=300, null=True, verbose_name='Encounter type')),
                ('comments', models.TextField(blank=True, help_text='Comments', null=True, verbose_name='Comments')),
            ],
            options={
                'verbose_name': 'Encounter',
                'verbose_name_plural': 'Encounters',
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
            },
        ),
        migrations.CreateModel(
            name='Expedition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_on', models.DateTimeField(blank=True, help_text='The datetime of entering the site, shown as local time (no daylight savings), stored as UTC.', null=True, verbose_name='Site entered on')),
                ('finished_on', models.DateTimeField(blank=True, help_text='The datetime of leaving the site, shown as local time (no daylight savings), stored as UTC.', null=True, verbose_name='Site left on')),
                ('comments', models.TextField(blank=True, help_text='Describe any circumstances affecting data collection, e.g. days without surveys.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='FieldMediaAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('data_sheet', 'Data sheet'), ('journal', 'Field journal'), ('communication', 'Communication record'), ('photograph', 'Photograph'), ('other', 'Other')], default='photograph', help_text='What is the attached file about?', max_length=300, verbose_name='Attachment type')),
                ('title', models.CharField(blank=True, help_text='Give the attachment a representative name', max_length=300, null=True, verbose_name='Attachment name')),
                ('attachment', models.FileField(help_text='Upload the file', max_length=500, upload_to=wastd.observations.models.expedition_media, verbose_name='File attachment')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SiteVisitStartEnd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the record in the original source, or a newly allocated ID if left blank. Delete and save to regenerate this ID.', max_length=1000, null=True, verbose_name='Source ID')),
                ('datetime', models.DateTimeField(help_text='Local time (no daylight savings), stored as UTC.', verbose_name='Observation time')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='The observation location as point in WGS84', srid=4326, verbose_name='Location')),
                ('type', models.CharField(choices=[('start', 'start'), ('end', 'end')], default='start', help_text='Start of end of site visit?', max_length=300, verbose_name='Type')),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', django_fsm.FSMField(choices=[('new', 'New'), ('proofread', 'Proofread'), ('curated', 'Curated'), ('published', 'Published')], default='new', max_length=50, verbose_name='QA Status')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the start point in the original source.', max_length=1000, null=True, verbose_name='Source ID')),
                ('device_id', models.CharField(blank=True, help_text='The ID of the recording device, if available.', max_length=1000, null=True, verbose_name='Device ID')),
                ('transect', django.contrib.gis.db.models.fields.LineStringField(blank=True, help_text='The surveyed path as LineString in WGS84, optional. E.g. automatically captured by form Track Tally.', null=True, srid=4326, verbose_name='Transect line')),
                ('start_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The start location as point in WGS84.', null=True, srid=4326, verbose_name='Survey start point')),
                ('start_time', models.DateTimeField(blank=True, help_text="The datetime of entering the site, shown as local time (no daylight savings), stored as UTC. The time of 'feet in the sand, start recording encounters'.", null=True, verbose_name='Survey start time')),
                ('start_photo', models.FileField(blank=True, help_text='Site conditions at start of survey.', max_length=500, null=True, upload_to=wastd.observations.models.survey_media, verbose_name='Site photo start')),
                ('start_comments', models.TextField(blank=True, help_text='Describe any circumstances affecting data collection, e.g. days without surveys.', null=True, verbose_name='Comments at start')),
                ('end_source_id', models.CharField(blank=True, help_text='The ID of the record in the original source.', max_length=1000, null=True, verbose_name='Source ID of end point')),
                ('end_device_id', models.CharField(blank=True, help_text='The ID of the recording device which captured the end point, if available.', max_length=1000, null=True, verbose_name='End Device ID')),
                ('end_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The end location as point in WGS84.', null=True, srid=4326, verbose_name='Survey end point')),
                ('end_time', models.DateTimeField(blank=True, help_text="The datetime of leaving the site, shown as local time (no daylight savings), stored as UTC. The time of 'feet in the sand, done recording encounters.'", null=True, verbose_name='Survey end time')),
                ('end_photo', models.FileField(blank=True, help_text='Site conditions at end of survey.', max_length=500, null=True, upload_to=wastd.observations.models.expedition_media, verbose_name='Site photo end')),
                ('end_comments', models.TextField(blank=True, help_text='Describe any circumstances affecting data collection, e.g. days without surveys.', null=True, verbose_name='Comments at finish')),
                ('production', models.BooleanField(default=True, help_text='Whether the survey is a real (production) survey, or a training survey.', verbose_name='Production run')),
                ('reporter', models.ForeignKey(blank=True, help_text='The person who captured the start point, ideally this person also recoreded the encounters and end point.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Recorded by')),
                ('site', models.ForeignKey(blank=True, help_text='The surveyed site, if known.', null=True, on_delete=django.db.models.deletion.PROTECT, to='observations.Area', verbose_name='Surveyed site')),
                ('team', models.ManyToManyField(blank=True, help_text='Additional field workers, apart from the reporter, who assisted with data collection.', related_name='survey_team', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start_location', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SurveyEnd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the start point in the original source.', max_length=1000, null=True, verbose_name='Source ID')),
                ('device_id', models.CharField(blank=True, help_text='The ID of the recording device, if available.', max_length=1000, null=True, verbose_name='Device ID')),
                ('end_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The end location as point in WGS84.', null=True, srid=4326, verbose_name='Survey end point')),
                ('end_time', models.DateTimeField(blank=True, help_text="The datetime of leaving the site, shown as local time (no daylight savings), stored as UTC. The time of 'feet in the sand, done recording encounters.'", null=True, verbose_name='Survey end time')),
                ('end_photo', models.FileField(help_text='Site conditions at end of survey.', max_length=500, upload_to=wastd.observations.models.survey_media, verbose_name='Site photo end')),
                ('end_comments', models.TextField(blank=True, help_text='Describe any circumstances affecting data collection, e.g. days without surveys.', null=True, verbose_name='Comments at finish')),
                ('reporter', models.ForeignKey(blank=True, help_text='The person who captured the start point, ideally this person also recoreded the encounters and end point.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Recorded by')),
                ('site', models.ForeignKey(blank=True, help_text='The surveyed site, if known.', null=True, on_delete=django.db.models.deletion.PROTECT, to='observations.Area', verbose_name='Surveyed site')),
            ],
            options={
                'ordering': ['end_location', 'end_time'],
            },
        ),
        migrations.CreateModel(
            name='AnimalEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('taxon', models.CharField(choices=[('na', 'not observed'), ('Cheloniidae', 'Marine turtles'), ('Cetacea', 'Whales and Dolphins'), ('Pinnipedia', 'Pinnipeds'), ('Sirenia', 'Dugongs'), ('Elasmobranchii', 'Sharks and Rays'), ('Hydrophiinae', 'Sea snakes and kraits')], default='Cheloniidae', help_text='The taxonomic group of the animal.', max_length=300, verbose_name='Taxonomic group')),
                ('species', models.CharField(choices=[('na', 'not observed'), ('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('corolla-corolla', 'Corolla corolla (Hatchback turtle)'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)'), ('delphinus-delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('grampus-griseus', "Grampus griseus (Risso's dolphin)"), ('lagenodelphis-hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('lagenorhynchus-obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('orcaella-heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('sousa-sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('sousa-chinensis', 'Sousa chinensis (Chinese white dolphin)'), ('stenella-attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('stenella-coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('stenella-longirostris', 'Stenella longirostris (Spinner dolphin)'), ('stenella-sp', 'Stenella sp. (Unidentified spotted dolphin)'), ('steno-bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('tursiops-aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('tursiops-truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('tursiops-sp', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('delphinidae-fam', 'Unidentified dolphin'), ('balaenoptera-acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('balaenoptera-bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)'), ('balaenoptera-borealis', 'Balaenoptera borealis (Sei whale)'), ('balaenoptera-edeni', "Balaenoptera edeni (Bryde's whale)"), ('balaenoptera-musculus', 'Balaenoptera musculus (Blue whale)'), ('balaenoptera-musculus-brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('balaenoptera-physalus', 'Balaenoptera physalus (Fin whale)'), ('balaenoptera-omurai', "Balaenoptera omurai (Omura's whale)"), ('balaenoptera-sp', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('caperea-marginata', 'Caperea marginata (Pygmy Right Whale)'), ('eubalaena-australis', 'Eubalaena australis (Southern right whale)'), ('feresa-attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('globicephala-macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('globicephala-melas', 'Globicephala melas (Long-finned pilot whale)'), ('globicephala-sp', 'Globicephala sp. (Unidentified pilot whale)'), ('indopacetus-pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('kogia-breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('kogia-sima', 'Kogia sima (Dwarf sperm whale)'), ('kogia-sp', 'Kogia sp. (Unidentified small sperm whale)'), ('megaptera-novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('mesoplodon-bowdoini', "Mesoplodon bowdoini (Andew's beaked whale)"), ('mesoplodon-densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('mesoplodon-grayi', "Mesoplodon grayi (Gray's beaked whale)"), ('mesoplodon-hectori', "Mesoplodon hectori (Hector's beaked whale"), ('mesoplodon-layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('mesoplodon-mirus', "Mesoplodon mirus (True's beaked whale)"), ('mesoplodon-sp', 'Mesoplodon sp. (Beaked whale)'), ('berardius-arnuxii', 'Berardius arnuxii (Giant beaked whale)'), ('orcinus-orca', 'Orcinus orca (Killer whale)'), ('peponocephala-electra', 'Peponocephala electra (Melon-headed whale)'), ('physeter-macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('pseudorca-crassidens', 'Pseudorca crassidens (False killer whale)'), ('ziphius-cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('tasmacetus-shepherdi', "Tasmacetus shepherdi (Shepherd's beaked whale)"), ('cetacea', 'Unidentified whale'), ('dugong-dugon', 'Dugong dugon (Dugong)'), ('arctocephalus-forsteri', 'Arctocephalus forsteri (New Zealand fur seal)'), ('neophoca-cinerea', 'Neophoca cinerea (Australian sea lion)'), ('arctocephalus-tropicalis', 'Arctocephalus tropicalis (Subantarctic fur seal)'), ('hydrurga-leptonyx', 'Hydrurga leptonyx (Leopard seal)'), ('lobodon-carcinophagus', 'Lobodon carcinophagus (Crabeater seal)'), ('mirounga-leonina', 'Mirounga leonina (Southern elephant seal)'), ('pinnipedia', 'Unidentified pinniped'), ('hydrophiinae-subfam', 'Hydrophiinae subfam. (Sea snakes and kraits)'), ('acalyptophis-sp', 'Acalyptophis sp. (Horned sea snake)'), ('aipysurus-sp', 'Aipysurus sp. (Olive sea snake)'), ('astrotia-sp', "Astrotia sp. (Stokes' sea snake)"), ('emydocephalus-sp', 'Emydocephalus sp. (Turtlehead sea snake)'), ('enhydrina-sp', 'Enhydrina sp. (Beaked sea snake)'), ('ephalophis-sp', "Ephalophis sp. (Grey's mudsnake)"), ('hydrelaps-sp', 'Hydrelaps sp. (Port Darwin mudsnake)'), ('hydrophis-sp', 'Hydrophis sp. (sea snake)'), ('kerilia-sp', "Kerilia sp. (Jerdon's sea snake)"), ('kolpophis-sp', 'Kolpophis sp. (bighead sea snake)'), ('lapemis-sp', "Lapemis sp. (Shaw's sea snake)"), ('laticauda-sp', 'Laticauda sp. (Sea krait)'), ('parahydrophis-sp', 'Parahydrophis (Northern mangrove sea snake)'), ('parapistocalamus-sp', "Parapistocalamus sp. (Hediger's snake)"), ('pelamis-sp', 'Pelamis sp. (Yellow-bellied sea snake)'), ('praescutata-sp', 'Praescutata sp. (Sea snake)'), ('thalassophis-sp', 'Thalassophis sp. (Sea snake)')], default='unidentified', help_text='The species of the animal.', max_length=300, verbose_name='Species')),
                ('sex', models.CharField(choices=[('na', 'unknown sex'), ('male', 'male'), ('female', 'female'), ('intersex', 'hermaphrodite or intersex')], default='na', help_text="The animal's sex.", max_length=300, verbose_name='Sex')),
                ('maturity', models.CharField(choices=[('na', 'unknown maturity'), ('hatchling', 'hatchling'), ('post-hatchling', 'post-hatchling'), ('juvenile', 'juvenile'), ('pre-pubsecent-immature', 'pre-pubsecent immature'), ('pubsecent-immature', 'pubsecent immature'), ('sub-adult', 'sub-adult'), ('adult-measured', 'adult (status determined from carapace and tail measurements)'), ('unweaned', 'unweaned immature'), ('weaned', 'weaned immature'), ('adult', 'adult')], default='na', help_text="The animal's maturity.", max_length=300, verbose_name='Maturity')),
                ('health', models.CharField(choices=[('na', 'unknown health'), ('alive', 'alive, healthy'), ('alive-injured', 'alive, injured'), ('alive-then-died', 'D1 (alive, then died)'), ('dead-edible', 'D2 (dead, fresh)'), ('dead-organs-intact', 'D3 (dead, organs intact)'), ('dead-advanced', 'D4 (dead, organs decomposed)'), ('dead-mummified', 'D5 (dead, mummified)'), ('dead-disarticulated', 'D6 (dead, disarticulated)'), ('other', 'other')], default='na', help_text='On a scale from the Fresh Prince of Bel Air to 80s Hair Metal: how dead and decomposed is the animal?', max_length=300, verbose_name='Health status')),
                ('activity', models.CharField(choices=[('na', 'not observed'), ('arriving', 'arriving on beach'), ('approaching', 'approaching nesting site'), ('digging-body-pit', 'digging body pit'), ('excavating-egg-chamber', 'excavating egg chamber'), ('laying-eggs', 'laying eggs'), ('filling-in-egg-chamber', 'filling in egg chamber'), ('filling-in-nest', 'filling in nest'), ('camouflaging-nest', 'camouflaging nest'), ('returning-to-water', 'returning to water'), ('general-breeding-activity', 'general breeding activity'), ('floating', 'floating (dead, sick, unable to dive, drifting in water)'), ('beach-washed', 'beach washed (dead, sick or stranded on beach/coast)'), ('beach-jumped', 'beach jumped'), ('carcass-tagged-released', 'carcass tagged and released'), ('carcass-inland', 'carcass or butchered remains found removed from coast'), ('captivity', 'in captivity'), ('non-breeding', 'general non-breeding activity (swimming, sleeping, feeding, etc.)'), ('other', 'other activity')], default='na', help_text="The animal's activity at the time of observation.", max_length=300, verbose_name='Activity')),
                ('behaviour', models.TextField(blank=True, help_text='Notes on condition or behaviour.', null=True, verbose_name='Condition and behaviour')),
                ('habitat', models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation (old db value)'), ('below-mshwm', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water'), ('harbour', 'harbour'), ('boat-ramp', 'boat ramp')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500, verbose_name='Habitat')),
                ('nesting_event', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal nesting?', max_length=300, verbose_name='Nesting event')),
                ('laparoscopy', models.BooleanField(default=False, help_text="Was the animal's sex and maturity determined through laparoscopy?", max_length=300, verbose_name='Laparoscopy conducted')),
                ('checked_for_injuries', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal checked for injuries, were any found?', max_length=300, verbose_name='Checked for injuries')),
                ('scanned_for_pit_tags', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal scanned for PIT tags, were any found?', max_length=300, verbose_name='Scanned for PIT tags')),
                ('checked_for_flipper_tags', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal checked for flipper tags, were any found?', max_length=300, verbose_name='Checked for flipper tags')),
                ('cause_of_death', models.CharField(choices=[('na', 'not observed'), ('indeterminate-decomposed', 'Indeterminate due to decomposition'), ('boat-strike', 'Boat strike'), ('trauma-human-induced', 'Human induced trauma'), ('trauma-animal-induced', 'Animal induced trauma'), ('drowned-entangled-fisheries', 'Drowned entangled in fisheries equipment'), ('drowned-entangled-infrastructure', 'Drowned entangled in infrastructure'), ('drowned-entangled-debris', 'Drowned entangled in debris'), ('drowned-entangled', 'Drowned entangled'), ('drowned-other', 'Drowned'), ('fishery-bycatch', 'Fishery bycatch'), ('handling-accident', 'Handling accident'), ('car-collision', 'Car collision'), ('ingested-debris', 'Ingested debris'), ('harvest', 'Harvested for human consumption'), ('poisoned', 'Poisoned'), ('misorientation', 'Misorientation on beach'), ('natural', 'Natural death'), ('birthing', 'Birthing complications'), ('still-born', 'Still birth'), ('calf-failure-to-thrive', 'Calf failed to thrive'), ('starved', 'Starvation'), ('stranded', 'Stranding'), ('euthanasia-firearm', 'Euthanasia by firearm'), ('euthanasia-injection', 'Euthanasia by injection'), ('euthanasia-implosion', 'Euthanasia by implosion'), ('euthanasia', 'Euthanasia'), ('predation', 'Predation')], default='na', help_text='If dead, is the case of death known?', max_length=300, verbose_name='Cause of death')),
                ('cause_of_death_confidence', models.CharField(choices=[('na', 'not observed'), ('guess', 'Guess based on insuffient evidence'), ('expert-opinion', 'Expert opinion based on available evidence'), ('validated', 'Validated by authoritative source')], default='na', help_text='What is the cause of death, if known, based on?', max_length=300, verbose_name='Cause of death confidence')),
            ],
            options={
                'verbose_name': 'Animal Encounter',
                'verbose_name_plural': 'Animal Encounters',
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='DispatchRecord',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('sent_to', models.ForeignKey(blank=True, help_text='The receiver of the dispatch.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='receiver', to=settings.AUTH_USER_MODEL, verbose_name='Sent to')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='DugongMorphometricObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('body_length_mm', models.PositiveIntegerField(blank=True, help_text='The body length in millimetres.', null=True, verbose_name='Body length (mm)')),
                ('body_girth_mm', models.PositiveIntegerField(blank=True, help_text='The body girth at the widest point in millimetres.', null=True, verbose_name='Body girth (mm)')),
                ('tail_fluke_width_mm', models.PositiveIntegerField(blank=True, help_text='The tail fluke width in millimetres.', null=True, verbose_name='Tail fluke width (mm)')),
                ('tusks_found', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Did the animal have tusks?', max_length=300, verbose_name='Tusks found')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='HatchlingMorphometricObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('straight_carapace_length_mm', models.PositiveIntegerField(blank=True, help_text='The straight carapace length in millimetres.', null=True, verbose_name='Straight carapace length (mm)')),
                ('straight_carapace_width_mm', models.PositiveIntegerField(blank=True, help_text='The straight carapace width in millimetres.', null=True, verbose_name='Straight carapace width (mm)')),
                ('body_weight_g', models.PositiveIntegerField(blank=True, help_text='The body weight in grams (1000 g = 1kg).', null=True, verbose_name='Body weight (g)')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='LineTransectEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('transect', django.contrib.gis.db.models.fields.LineStringField(help_text='The line transect as LineString in WGS84', srid=4326, verbose_name='Transect line')),
            ],
            options={
                'verbose_name': 'Line Transect Encounter',
                'verbose_name_plural': 'Line Transect Encounters',
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='LoggerEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('logger_type', models.CharField(choices=[('temperature-logger', 'Temperature Logger'), ('data-logger', 'Data Logger'), ('ctd-data-logger', 'Conductivity, Temperature, Depth SR data logger')], default='temperature-logger', help_text='The logger type.', max_length=300, verbose_name='Type')),
                ('deployment_status', models.CharField(choices=[('programmed', 'programmed'), ('posted', 'posted to field team'), ('deployed', 'deployed in situ'), ('resighted', 'resighted in situ'), ('retrieved', 'retrieved in situ'), ('downloaded', 'downloaded')], default='resighted', help_text='The logger life cycle status.', max_length=300, verbose_name='Status')),
                ('logger_id', models.CharField(blank=True, help_text='The ID of a logger must be unique within the tag type.', max_length=1000, null=True, verbose_name='Logger ID')),
            ],
            options={
                'verbose_name': 'Logger Encounter',
                'verbose_name_plural': 'Logger Encounters',
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='ManagementAction',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('management_actions', models.TextField(blank=True, help_text='Managment actions taken. Keep updating as appropriate.', null=True, verbose_name='Management Actions')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('media_type', models.CharField(choices=[('data_sheet', 'Data sheet'), ('communication', 'Communication record'), ('photograph', 'Photograph'), ('other', 'Other')], default='photograph', help_text='What is the attached file about?', max_length=300, verbose_name='Attachment type')),
                ('title', models.CharField(blank=True, help_text='Give the attachment a representative name', max_length=300, null=True, verbose_name='Attachment name')),
                ('attachment', models.FileField(help_text='Upload the file', max_length=500, upload_to=wastd.observations.models.encounter_media, verbose_name='File attachment')),
            ],
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='NestTagObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('status', models.CharField(choices=[('applied-new', 'applied new'), ('resighted', 're-sighted associated with nest')], default='resighted', help_text='The status this tag was seen in, or brought into.', max_length=300, verbose_name='Tag status')),
                ('flipper_tag_id', models.CharField(blank=True, help_text='The primary flipper tag ID of the nesting turtle if available.', max_length=1000, null=True, verbose_name='Flipper Tag ID')),
                ('date_nest_laid', models.DateField(blank=True, help_text='The calendar (not turtle) date of nest creation.', null=True, verbose_name='Date nest laid')),
                ('tag_label', models.CharField(blank=True, help_text='Any extra nest label if other two components are not available.', max_length=1000, null=True, verbose_name='Tag Label')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='SiteVisit',
            fields=[
                ('expedition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Expedition')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the start point in the original source, or a newly allocated ID if left blank. Delete and save to regenerate this ID.', max_length=1000, null=True, verbose_name='Source ID')),
                ('end_source_id', models.CharField(blank=True, help_text='The ID of the record in the original source, or a newly allocated ID if left blank. Delete and save to regenerate this ID.', max_length=1000, null=True, verbose_name='Source ID of end point')),
                ('start_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The start location as point in WGS84', null=True, srid=4326, verbose_name='Start location')),
                ('end_location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='The end location as point in WGS84', null=True, srid=4326, verbose_name='End location')),
                ('transect', django.contrib.gis.db.models.fields.LineStringField(blank=True, help_text='The surveyed path as LineString in WGS84, optional.', null=True, srid=4326, verbose_name='Transect line')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.expedition',),
        ),
        migrations.CreateModel(
            name='TagObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('tag_type', models.CharField(choices=[('flipper-tag', 'Flipper Tag'), ('pit-tag', 'PIT Tag'), ('sat-tag', 'Satellite Relay Data Logger'), ('blood-sample', 'Blood Sample'), ('biopsy-sample', 'Biopsy Sample'), ('stomach-content-sample', 'Stomach Content Sample'), ('physical-sample', 'Physical Sample'), ('egg-sample', 'Egg Sample'), ('qld-monel-a-flipper-tag', 'QLD Monel Series A flipper tag'), ('qld-titanium-k-flipper-tag', 'QLD Titanium Series K flipper tag'), ('qld-titanium-t-flipper-tag', 'QLD Titanium Series T flipper tag'), ('acoustic-tag', 'Acoustic tag'), ('commonwealth-titanium-flipper-tag', 'Commonwealth titanium flipper tag (old db value)'), ('cmlth-titanium-flipper-tag', 'Commonwealth titanium flipper tag'), ('cayman-juvenile-tag', 'Cayman juvenile tag'), ('hawaii-inconel-flipper-tag', 'Hawaii Inst Mar Biol Inconel tag'), ('ptt', 'Platform Transmitter Terminal (PTT)'), ('rototag', 'RotoTag'), ('narangebub-nickname', 'Narangebup rehab informal name'), ('aqwa-nickname', 'AQWA informal name'), ('atlantis-nickname', 'Atlantis informal name'), ('wa-museum-reptile-registration-number', 'WA Museum Natural History Reptiles Catalogue Registration Number (old db value)'), ('wam-reptile-registration-number', 'WA Museum Natural History Reptiles Catalogue Registration Number'), ('genetic-tag', 'Genetic ID sequence'), ('other', 'Other')], default='flipper-tag', help_text='What kind of tag is it?', max_length=300, verbose_name='Tag type')),
                ('tag_location', models.CharField(choices=[('head', 'head'), ('eyes', 'eyes'), ('neck', 'neck'), ('plastron', 'plastron'), ('carapace', 'carapace'), ('internals', 'internals'), ('cloaca', 'cloaca'), ('tail', 'tail'), ('flipper-front-left-1', 'front left flipper, 1st scale from body'), ('flipper-front-left-2', 'front left flipper, 2nd scale from body'), ('flipper-front-left-3', 'front left flipper, 3rd scale from body'), ('flipper-front-left', 'front left flipper'), ('flipper-front-right-1', 'front right flipper, 1st scale from body'), ('flipper-front-right-2', 'front right flipper, 2nd scale from body'), ('flipper-front-right-3', 'front right flipper, 3rd scale from body'), ('flipper-front-right', 'front right flipper'), ('flipper-rear-left', 'rear left flipper'), ('flipper-rear-right', 'rear right flipper'), ('shoulder-left', 'left shoulder'), ('shoulder-right', 'right shoulder'), ('whole', 'whole turtle'), ('other', 'Other')], default='whole', help_text='Where is the tag attached, or the sample taken from?', max_length=300, verbose_name='Tag position')),
                ('name', models.CharField(help_text='The ID of a tag must be unique within the tag type.', max_length=1000, verbose_name='Tag ID')),
                ('status', models.CharField(choices=[('ordered', 'ordered from manufacturer'), ('produced', 'produced by manufacturer'), ('delivered', 'delivered to HQ'), ('allocated', 'allocated to field team'), ('applied-new', 'applied new'), ('resighted', 're-sighted associated with animal'), ('reclinched', 're-sighted and reclinched on animal'), ('removed', 'taken off animal'), ('found', 'found detached'), ('returned', 'returned to HQ'), ('decommissioned', 'decommissioned'), ('destroyed', 'destroyed'), ('observed', 'observed in any other context, see comments')], default='resighted', help_text='The status this tag was seen in, or brought into.', max_length=300, verbose_name='Tag status')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
                ('handler', models.ForeignKey(blank=True, help_text='The person in physical contact with the tag or sample', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tag_handler', to=settings.AUTH_USER_MODEL, verbose_name='Handled by')),
                ('recorder', models.ForeignKey(blank=True, help_text='The person who records the tag observation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tag_recorder', to=settings.AUTH_USER_MODEL, verbose_name='Recorded by')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TemperatureLoggerDeployment',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('depth_mm', models.PositiveIntegerField(blank=True, help_text='The depth of the buried logger in mm.', null=True, verbose_name='Logger depth (mm)')),
                ('marker1_present', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Is the first marker in place?', max_length=300, verbose_name='Marker 1 present')),
                ('distance_to_marker1_mm', models.PositiveIntegerField(blank=True, help_text='The distance to the first marker in mm.', null=True, verbose_name='Distance to marker 1 (mm)')),
                ('marker2_present', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Is the second marker in place?', max_length=300, verbose_name='Marker 2 present')),
                ('distance_to_marker2_mm', models.PositiveIntegerField(blank=True, help_text='The distance to the second marker in mm.', null=True, verbose_name='Distance to marker 2 (mm)')),
                ('habitat', models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation (old db value)'), ('below-mshwm', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water'), ('harbour', 'harbour'), ('boat-ramp', 'boat ramp')], default='na', help_text='The habitat in which the nest was encountered.', max_length=500, verbose_name='Habitat')),
                ('distance_to_vegetation_mm', models.PositiveIntegerField(blank=True, help_text='The distance to the beach-vegetation border in mm. Positive values if logger is located on beach, negative values if in vegetation.', null=True, verbose_name='Distance to vegetation (mm)')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TemperatureLoggerSettings',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('logging_interval', models.DurationField(blank=True, help_text='The time between individual readings as python timedelta string. E.g, 1h is `01:00:00`; 1 day is `1 00:00:00`.', null=True, verbose_name='Logging interval')),
                ('recording_start', models.DateTimeField(blank=True, help_text='The preset start of recording, stored as UTC and shown in local time.', null=True, verbose_name='Recording start')),
                ('tested', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the logger tested after programming?', max_length=300, verbose_name='Tested')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TrackTallyObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('species', models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('corolla-corolla', 'Corolla corolla (Hatchback turtle)'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal causing the track.', max_length=300, verbose_name='Species')),
                ('nest_age', models.CharField(choices=[('old', '(O) old, made before last night'), ('fresh', '(F) fresh, made last night'), ('unknown', '(U) unknown age'), ('missed', '(M) missed turtle, made within past hours')], default='unknown', help_text='The track or nest age.', max_length=300, verbose_name='Age')),
                ('nest_type', models.CharField(choices=[('track-not-assessed', 'track, not checked for nest'), ('false-crawl', 'track without nest'), ('successful-crawl', 'track with nest'), ('track-unsure', 'track, checked for nest, unsure if nest'), ('nest', 'nest, unhatched, no track'), ('hatched-nest', 'nest, hatched'), ('body-pit', 'body pit, no track')], default='track-not-assessed', help_text='The track or nest type.', max_length=300, verbose_name='Type')),
                ('tally', models.PositiveIntegerField(blank=True, help_text='The sum of encountered tracks.', null=True, verbose_name='Tally')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleDamageObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('body_part', models.CharField(choices=[('head', 'head'), ('eyes', 'eyes'), ('neck', 'neck'), ('plastron', 'plastron'), ('carapace', 'carapace'), ('internals', 'internals'), ('cloaca', 'cloaca'), ('tail', 'tail'), ('flipper-front-left-1', 'front left flipper, 1st scale from body'), ('flipper-front-left-2', 'front left flipper, 2nd scale from body'), ('flipper-front-left-3', 'front left flipper, 3rd scale from body'), ('flipper-front-left', 'front left flipper'), ('flipper-front-right-1', 'front right flipper, 1st scale from body'), ('flipper-front-right-2', 'front right flipper, 2nd scale from body'), ('flipper-front-right-3', 'front right flipper, 3rd scale from body'), ('flipper-front-right', 'front right flipper'), ('flipper-rear-left', 'rear left flipper'), ('flipper-rear-right', 'rear right flipper'), ('shoulder-left', 'left shoulder'), ('shoulder-right', 'right shoulder'), ('whole', 'whole turtle'), ('other', 'Other')], default='whole-turtle', help_text='The body part affected by the observed damage.', max_length=300, verbose_name='Affected body part')),
                ('damage_type', models.CharField(choices=[('tip-amputated', 'tip amputation'), ('amputated-from-nail', 'amputation from nail'), ('amputated-half', 'half amputation'), ('amputated-entirely', 'entire amputation'), ('barnacles', 'barnacles'), ('algal-growth', 'algal growth'), ('tumor', 'tumor'), ('tag-scar', 'tag scar'), ('tag-seen', 'tag seen but not identified'), ('cuts', 'cuts'), ('boat-strike', 'boat or propeller strike'), ('entanglement', 'entanglement'), ('deformity', 'deformity'), ('other', 'other')], default='minor-trauma', help_text='The type of the damage.', max_length=300, verbose_name='Damage type')),
                ('damage_age', models.CharField(choices=[('healed-entirely', 'entirely healed'), ('healed-partially', 'partially healed'), ('fresh', 'fresh')], default='healed-entirely', help_text='The age of the damage.', max_length=300, verbose_name='Damage age')),
                ('description', models.TextField(blank=True, help_text='A description of the damage.', null=True, verbose_name='Description')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleMorphometricObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('curved_carapace_length_mm', models.PositiveIntegerField(blank=True, help_text='The curved carapace length in millimetres.', null=True, verbose_name='Curved carapace length (mm)')),
                ('curved_carapace_length_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Curved carapace length accuracy')),
                ('straight_carapace_length_mm', models.PositiveIntegerField(blank=True, help_text='The straight carapace length in millimetres.', null=True, verbose_name='Straight carapace length (mm)')),
                ('straight_carapace_length_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Straight carapace length accuracy')),
                ('curved_carapace_width_mm', models.PositiveIntegerField(blank=True, help_text='Curved carapace width in millimetres.', null=True, verbose_name='Curved carapace width (mm)')),
                ('curved_carapace_width_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Curved carapace width (mm)')),
                ('tail_length_carapace_mm', models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from carapace to tip.', null=True, verbose_name='Tail length from carapace (mm)')),
                ('tail_length_carapace_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail length from carapace accuracy')),
                ('tail_length_vent_mm', models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from vent to tip.', null=True, verbose_name='Tail length from vent (mm)')),
                ('tail_length_vent_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail Length Accuracy')),
                ('tail_length_plastron_mm', models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from plastron to tip.', null=True, verbose_name='Tail length from plastron (mm)')),
                ('tail_length_plastron_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail length from plastron accuracy')),
                ('maximum_head_width_mm', models.PositiveIntegerField(blank=True, help_text='The maximum head width in millimetres.', null=True, verbose_name='Maximum head width (mm)')),
                ('maximum_head_width_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Maximum head width accuracy')),
                ('maximum_head_length_mm', models.PositiveIntegerField(blank=True, help_text='The maximum head length in millimetres.', null=True, verbose_name='Maximum head length (mm)')),
                ('maximum_head_length_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Maximum head length accuracy')),
                ('body_depth_mm', models.PositiveIntegerField(blank=True, help_text='The body depth, plastron to carapace, in millimetres.', null=True, verbose_name='Body depth (mm)')),
                ('body_depth_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Body depth accuracy')),
                ('body_weight_g', models.PositiveIntegerField(blank=True, help_text='The body weight in grams (1000 g = 1kg).', null=True, verbose_name='Body weight (g)')),
                ('body_weight_accuracy', models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Body weight accuracy')),
                ('handler', models.ForeignKey(blank=True, help_text='The person conducting the measurements.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='morphometric_handler', to=settings.AUTH_USER_MODEL, verbose_name='Measured by')),
                ('recorder', models.ForeignKey(blank=True, help_text='The person recording the measurements.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='morphometric_recorder', to=settings.AUTH_USER_MODEL, verbose_name='Recorded by')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleNestDisturbanceObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('disturbance_cause', models.CharField(choices=[('turtle', '(A)nother turtle'), ('bandicoot', '(Ba)ndicoot predation'), ('bird', '(Bi)rd predation'), ('crab', '(Cr)ab predation'), ('croc', '(Cr)oc predation'), ('cyclone', '(Cy)clone disturbance'), ('dingo', '(Di)ngo predation'), ('dog', '(Do)g predation'), ('fox', '(F)ox predation'), ('goanna', '(G)oanna predation'), ('human', '(Hu)man'), ('pig', '(P)ig predation'), ('tide', '(Ti)dal disturbance'), ('vehicle', '(V)ehicle damage'), ('unknown', '(U)nknown'), ('other', '(O)ther identifiable (see comments)')], help_text='The cause of the disturbance.', max_length=300, verbose_name='Disturbance cause')),
                ('disturbance_cause_confidence', models.CharField(choices=[('na', 'not observed'), ('guess', 'Guess based on insuffient evidence'), ('expert-opinion', 'Expert opinion based on available evidence'), ('validated', 'Validated by authoritative source')], default='na', help_text='What is the choice of disturbance cause based on?', max_length=300, verbose_name='Disturbance cause choice confidence')),
                ('disturbance_severity', models.CharField(choices=[('partly', 'nest partly destroyed'), ('completely', 'nest completely destroyed'), ('na', 'nest in indeterminate condition')], default='na', help_text='The impact of the disturbance on nest viability.', max_length=300, verbose_name='Disturbance severity')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleNestDisturbanceTallyObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('species', models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('corolla-corolla', 'Corolla corolla (Hatchback turtle)'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the nesting animal.', max_length=300, verbose_name='Species')),
                ('disturbance_cause', models.CharField(choices=[('turtle', '(A)nother turtle'), ('bandicoot', '(Ba)ndicoot predation'), ('bird', '(Bi)rd predation'), ('crab', '(Cr)ab predation'), ('croc', '(Cr)oc predation'), ('cyclone', '(Cy)clone disturbance'), ('dingo', '(Di)ngo predation'), ('dog', '(Do)g predation'), ('fox', '(F)ox predation'), ('goanna', '(G)oanna predation'), ('human', '(Hu)man'), ('pig', '(P)ig predation'), ('tide', '(Ti)dal disturbance'), ('vehicle', '(V)ehicle damage'), ('unknown', '(U)nknown'), ('other', '(O)ther identifiable (see comments)')], default='turtle', help_text='The cause of the disturbance.', max_length=300, verbose_name='Disturbance cause')),
                ('no_nests_disturbed', models.PositiveIntegerField(blank=True, help_text='The sum of damaged nests.', null=True, verbose_name='Tally of nests disturbed')),
                ('no_tracks_encountered', models.PositiveIntegerField(blank=True, help_text='The sum of signs, e.g. predator tracks.', null=True, verbose_name='Tally of disturbance signs')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleNestEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('nest_age', models.CharField(choices=[('old', '(O) old, made before last night'), ('fresh', '(F) fresh, made last night'), ('unknown', '(U) unknown age'), ('missed', '(M) missed turtle, made within past hours')], default='unknown', help_text='The track or nest age.', max_length=300, verbose_name='Age')),
                ('nest_type', models.CharField(choices=[('track-not-assessed', 'track, not checked for nest'), ('false-crawl', 'track without nest'), ('successful-crawl', 'track with nest'), ('track-unsure', 'track, checked for nest, unsure if nest'), ('nest', 'nest, unhatched, no track'), ('hatched-nest', 'nest, hatched'), ('body-pit', 'body pit, no track')], default='track-not-assessed', help_text='The track or nest type.', max_length=300, verbose_name='Type')),
                ('species', models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('corolla-corolla', 'Corolla corolla (Hatchback turtle)'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal which created the track or nest.', max_length=300, verbose_name='Species')),
                ('habitat', models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation')], default='na', help_text='The habitat in which the track or nest was encountered.', max_length=500, verbose_name='Habitat')),
                ('disturbance', models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Is there evidence of predation or other disturbance?', max_length=300, verbose_name='Evidence of predation or disturbance')),
            ],
            options={
                'verbose_name': 'Turtle Nest Encounter',
                'verbose_name_plural': 'Turtle Nest Encounters',
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='TurtleNestObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('nest_position', models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation')], default='unknown', help_text='The position of the nest on the beach.', max_length=300, verbose_name='Beach position')),
                ('eggs_laid', models.BooleanField(default=False, help_text="Did round, white objects leave the turtle's butt?", verbose_name='Did the turtle lay eggs?')),
                ('egg_count', models.PositiveIntegerField(blank=True, help_text='The total number of eggs laid as observed during tagging.', null=True, verbose_name='Total number of eggs laid')),
                ('no_egg_shells', models.PositiveIntegerField(blank=True, help_text='The number of empty shells counted which were more than 50 percent complete.', null=True, verbose_name='Egg shells (S)')),
                ('no_live_hatchlings', models.PositiveIntegerField(blank=True, help_text='The number of live hatchlings left among shells excluding those in neck of nest.', null=True, verbose_name='Live hatchlings in nest (L)')),
                ('no_dead_hatchlings', models.PositiveIntegerField(blank=True, help_text='The number of dead hatchlings that have left their shells.', null=True, verbose_name='Dead hatchlings (D)')),
                ('no_undeveloped_eggs', models.PositiveIntegerField(blank=True, help_text='The number of unhatched eggs with no obvious embryo.', null=True, verbose_name='Undeveloped eggs (UD)')),
                ('no_unhatched_eggs', models.PositiveIntegerField(blank=True, help_text='The number of unhatched eggs with obvious, not yet full term, embryo.', null=True, verbose_name='Unhatched eggs (UH)')),
                ('no_unhatched_term', models.PositiveIntegerField(blank=True, help_text='The number of unhatched, apparently full term, embryo in egg or pipped with small amount of external yolk material.', null=True, verbose_name='Unhatched term (UHT)')),
                ('no_depredated_eggs', models.PositiveIntegerField(blank=True, help_text='The number of open, nearly complete shells containing egg residue.', null=True, verbose_name='Depredated eggs (P)')),
                ('nest_depth_top', models.PositiveIntegerField(blank=True, help_text='The depth of sand above the eggs in mm.', null=True, verbose_name='Nest depth (top) mm')),
                ('nest_depth_bottom', models.PositiveIntegerField(blank=True, help_text='The depth of the lowest eggs in mm.', null=True, verbose_name='Nest depth (bottom) mm')),
                ('sand_temp', models.FloatField(blank=True, help_text='The sand temperature in degree Celsius.', null=True, verbose_name='Sand temperature')),
                ('air_temp', models.FloatField(blank=True, help_text='The air temperature in degree Celsius.', null=True, verbose_name='Air temperature')),
                ('water_temp', models.FloatField(blank=True, help_text='The water temperature in degree Celsius.', null=True, verbose_name='Water temperature')),
                ('egg_temp', models.FloatField(blank=True, help_text='The egg temperature in degree Celsius.', null=True, verbose_name='Egg temperature')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.AddField(
            model_name='observation',
            name='encounter',
            field=models.ForeignKey(help_text='The Encounter during which the observation was made', on_delete=django.db.models.deletion.CASCADE, to='observations.Encounter', verbose_name='Encounter'),
        ),
        migrations.AddField(
            model_name='observation',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.observation_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='fieldmediaattachment',
            name='expedition',
            field=models.ForeignKey(help_text='Surveys can be conducted during an expedition.', on_delete=django.db.models.deletion.CASCADE, to='observations.Expedition', verbose_name='Expedition'),
        ),
        migrations.AddField(
            model_name='expedition',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.expedition_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='expedition',
            name='site',
            field=models.ForeignKey(blank=True, help_text='The entire surveyed area.', null=True, on_delete=django.db.models.deletion.PROTECT, to='observations.Area', verbose_name='Surveyed area'),
        ),
        migrations.AddField(
            model_name='expedition',
            name='team',
            field=models.ManyToManyField(related_name='expedition_team', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='encounter',
            name='area',
            field=models.ForeignKey(blank=True, help_text='The general area this encounter took place in.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='encounter_area', to='observations.Area', verbose_name='Area'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='observer',
            field=models.ForeignKey(help_text='The person who executes the measurements, source of measurement bias', on_delete=django.db.models.deletion.PROTECT, related_name='observer', to=settings.AUTH_USER_MODEL, verbose_name='Measured by'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.encounter_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='reporter',
            field=models.ForeignKey(help_text='The person who writes the data sheet in the field, source of handwriting and spelling errors', on_delete=django.db.models.deletion.PROTECT, related_name='reporter', to=settings.AUTH_USER_MODEL, verbose_name='Recorded by'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='site',
            field=models.ForeignKey(blank=True, help_text='The surveyed site, if known.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='encounter_site', to='observations.Area', verbose_name='Surveyed site'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='survey',
            field=models.ForeignKey(blank=True, help_text='The survey during which this encounter happened.', null=True, on_delete=django.db.models.deletion.PROTECT, to='observations.Survey', verbose_name='Survey'),
        ),
        migrations.AlterUniqueTogether(
            name='area',
            unique_together={('area_type', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='surveyend',
            unique_together={('source', 'source_id')},
        ),
        migrations.AlterUniqueTogether(
            name='survey',
            unique_together={('source', 'source_id')},
        ),
        migrations.AlterUniqueTogether(
            name='encounter',
            unique_together={('source', 'source_id')},
        ),
    ]
